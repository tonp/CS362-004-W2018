        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:11
        -:    0:Programs:11
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 30000390 returned 100% blocks executed 83%
 30000390:    8:int compare(const void* a, const void* b) {
 30000390:    8-block  0
 30000390:    9:  if (*(int*)a > *(int*)b)
 30000390:    9-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 30000390
    #####:   10:    return 1;
    $$$$$:   10-block  0
unconditional  0 never executed
 30000390:   11:  if (*(int*)a < * (int*)b)
 30000390:   11-block  0
branch  0 taken 8000104 (fallthrough)
branch  1 taken 22000286
  8000104:   12:    return -1;
  8000104:   12-block  0
unconditional  0 taken 8000104
 22000286:   13:  return 0;
 22000286:   13-block  0
unconditional  0 taken 22000286
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    $$$$$:   16-block  0
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
    $$$$$:   18-block  0
unconditional  0 never executed
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
    $$$$$:   21-block  0
        -:   22:                  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
    $$$$$:   34-block  0
unconditional  0 never executed
        -:   35:}
        -:   36:
function initializeGame called 1000013 returned 100% blocks executed 88%
  1000013:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
  1000013:   37-block  0
        -:   38:                   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
  1000013:   44:  SelectStream(1);
  1000013:   44-block  0
call    0 returned 1000013
  1000013:   45:  PutSeed((long)randomSeed);
call    0 returned 1000013
        -:   46:
        -:   47:  //check number of players
  1000013:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 1000013 (fallthrough)
branch  1 taken 0
  1000013:   48-block  0
branch  2 taken 0 (fallthrough)
branch  3 taken 1000013
        -:   49:  {
    #####:   50:    return -1;
    $$$$$:   50-block  0
unconditional  0 never executed
        -:   51:  }
        -:   52:
        -:   53:  //set number of players
  1000013:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
 11000143:   57:  for (i = 0; i < 10; i++)
  1000013:   57-block  0
unconditional  0 taken 1000013
 10000130:   57-block  1
unconditional  1 taken 10000130
 11000143:   57-block  2
branch  2 taken 10000130
branch  3 taken 1000013 (fallthrough)
        -:   58:  {
110001430:   59:    for (j = 0; j < 10; j++)
 10000130:   59-block  0
unconditional  0 taken 10000130
100001300:   59-block  1
unconditional  1 taken 100001300
110001430:   59-block  2
branch  2 taken 100001300
branch  3 taken 10000130 (fallthrough)
        -:   60:    {
100001300:   61:      if (j != i && kingdomCards[j] == kingdomCards[i])
100001300:   61-block  0
branch  0 taken 90001170 (fallthrough)
branch  1 taken 10000130
 90001170:   61-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 90001170
        -:   62:      {
    #####:   63:        return -1;
    $$$$$:   63-block  0
unconditional  0 never executed
        -:   64:      }
        -:   65:    }
        -:   66:  }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
  1000013:   73:  if (numPlayers == 2)
  1000013:   73-block  0
branch  0 taken 1000013 (fallthrough)
branch  1 taken 0
        -:   74:  {
  1000013:   75:    state->supplyCount[curse] = 10;
  1000013:   75-block  0
unconditional  0 taken 1000013
        -:   76:  }
    #####:   77:  else if (numPlayers == 3)
    $$$$$:   77-block  0
branch  0 never executed
branch  1 never executed
        -:   78:  {
    #####:   79:    state->supplyCount[curse] = 20;
    $$$$$:   79-block  0
unconditional  0 never executed
        -:   80:  }
        -:   81:  else
        -:   82:  {
    #####:   83:    state->supplyCount[curse] = 30;
    $$$$$:   83-block  0
unconditional  0 never executed
        -:   84:  }
        -:   85:
        -:   86:  //set number of Victory cards
  1000013:   87:  if (numPlayers == 2)
  1000013:   87-block  0
branch  0 taken 1000013 (fallthrough)
branch  1 taken 0
        -:   88:  {
  1000013:   89:    state->supplyCount[estate] = 8;
  1000013:   90:    state->supplyCount[duchy] = 8;
  1000013:   91:    state->supplyCount[province] = 8;
  1000013:   91-block  0
unconditional  0 taken 1000013
        -:   92:  }
        -:   93:  else
        -:   94:  {
    #####:   95:    state->supplyCount[estate] = 12;
    #####:   96:    state->supplyCount[duchy] = 12;
    #####:   97:    state->supplyCount[province] = 12;
    $$$$$:   97-block  0
unconditional  0 never executed
        -:   98:  }
        -:   99:
        -:  100:  //set number of Treasure cards
  1000013:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
  1000013:  102:  state->supplyCount[silver] = 40;
  1000013:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
 21000273:  106:  for (i = adventurer; i <= treasure_map; i++)        //loop all cards
  1000013:  106-block  0
unconditional  0 taken 1000013
 20000260:  106-block  1
unconditional  1 taken 20000260
 21000273:  106-block  2
branch  2 taken 20000260
branch  3 taken 1000013 (fallthrough)
        -:  107:  {
165002145:  108:    for (j = 0; j < 10; j++)              //loop chosen cards
 20000260:  108-block  0
unconditional  0 taken 20000260
145001885:  108-block  1
unconditional  1 taken 145001885
165002145:  108-block  2
branch  2 taken 155002015
branch  3 taken 10000130 (fallthrough)
        -:  109:    {
155002015:  110:      if (kingdomCards[j] == i)
155002015:  110-block  0
branch  0 taken 10000130 (fallthrough)
branch  1 taken 145001885
        -:  111:      {
        -:  112:        //check if card is a 'Victory' Kingdom card
 10000130:  113:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
 10000130:  113-block  0
branch  0 taken 10000130 (fallthrough)
branch  1 taken 0
 10000130:  113-block  1
branch  2 taken 1000013 (fallthrough)
branch  3 taken 9000117
        -:  114:        {
  2000026:  115:          if (numPlayers == 2) {
  1000013:  115-block  0
branch  0 taken 1000013 (fallthrough)
branch  1 taken 0
  1000013:  115-block  1
unconditional  2 taken 1000013
  1000013:  116:            state->supplyCount[i] = 8;
  1000013:  116-block  0
unconditional  0 taken 1000013
        -:  117:          }
    #####:  118:          else { state->supplyCount[i] = 12; }
    $$$$$:  118-block  0
unconditional  0 never executed
        -:  119:        }
        -:  120:        else
        -:  121:        {
  9000117:  122:          state->supplyCount[i] = 10;
  9000117:  122-block  0
unconditional  0 taken 9000117
        -:  123:        }
 10000130:  124:        break;
 10000130:  124-block  0
unconditional  0 taken 10000130
        -:  125:      }
        -:  126:      else    //card is not in the set choosen for the game
        -:  127:      {
145001885:  128:        state->supplyCount[i] = -1;
        -:  129:      }
        -:  130:    }
        -:  131:
        -:  132:  }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
  3000039:  138:  for (i = 0; i < numPlayers; i++)
  1000013:  138-block  0
unconditional  0 taken 1000013
  2000026:  138-block  1
unconditional  1 taken 2000026
  3000039:  138-block  2
branch  2 taken 2000026
branch  3 taken 1000013 (fallthrough)
        -:  139:  {
  2000026:  140:    state->deckCount[i] = 0;
  8000104:  141:    for (j = 0; j < 3; j++)
  2000026:  141-block  0
unconditional  0 taken 2000026
  6000078:  141-block  1
unconditional  1 taken 6000078
  8000104:  141-block  2
branch  2 taken 6000078
branch  3 taken 2000026 (fallthrough)
        -:  142:    {
  6000078:  143:      state->deck[i][j] = estate;
  6000078:  144:      state->deckCount[i]++;
        -:  145:    }
 16000208:  146:    for (j = 3; j < 10; j++)
  2000026:  146-block  0
unconditional  0 taken 2000026
 14000182:  146-block  1
unconditional  1 taken 14000182
 16000208:  146-block  2
branch  2 taken 14000182
branch  3 taken 2000026 (fallthrough)
        -:  147:    {
 14000182:  148:      state->deck[i][j] = copper;
 14000182:  149:      state->deckCount[i]++;
        -:  150:    }
        -:  151:  }
        -:  152:
        -:  153:  //shuffle player decks
  3000039:  154:  for (i = 0; i < numPlayers; i++)
  1000013:  154-block  0
unconditional  0 taken 1000013
  2000026:  154-block  1
unconditional  1 taken 2000026
  3000039:  154-block  2
branch  2 taken 2000026
branch  3 taken 1000013 (fallthrough)
        -:  155:  {
  2000026:  156:    if ( shuffle(i, state) < 0 )
  2000026:  156-block  0
call    0 returned 2000026
branch  1 taken 0 (fallthrough)
branch  2 taken 2000026
        -:  157:    {
    #####:  158:      return -1;
    $$$$$:  158-block  0
unconditional  0 never executed
        -:  159:    }
        -:  160:  }
        -:  161:
        -:  162:  //draw player hands
  3000039:  163:  for (i = 0; i < numPlayers; i++)
  1000013:  163-block  0
unconditional  0 taken 1000013
  2000026:  163-block  1
unconditional  1 taken 2000026
  3000039:  163-block  2
branch  2 taken 2000026
branch  3 taken 1000013 (fallthrough)
        -:  164:  {
        -:  165:    //initialize hand size to zero
  2000026:  166:    state->handCount[i] = 0;
  2000026:  167:    state->discardCount[i] = 0;
        -:  168:    //draw 5 cards
        -:  169:    // for (j = 0; j < 5; j++)
        -:  170:    //  {
        -:  171:    //    drawCard(i, state);
        -:  172:    //  }
        -:  173:  }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
 28000364:  176:  for (i = 0; i <= treasure_map; i++)
  1000013:  176-block  0
unconditional  0 taken 1000013
 27000351:  176-block  1
unconditional  1 taken 27000351
 28000364:  176-block  2
branch  2 taken 27000351
branch  3 taken 1000013 (fallthrough)
        -:  177:  {
 27000351:  178:    state->embargoTokens[i] = 0;
        -:  179:  }
        -:  180:
        -:  181:  //initialize first player's turn
  1000013:  182:  state->outpostPlayed = 0;
  1000013:  183:  state->phase = 0;
  1000013:  184:  state->numActions = 1;
  1000013:  185:  state->numBuys = 1;
  1000013:  186:  state->playedCardCount = 0;
  1000013:  187:  state->whoseTurn = 0;
  1000013:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
  6000078:  192:  for (it = 0; it < 5; it++) {
  1000013:  192-block  0
unconditional  0 taken 1000013
unconditional  1 taken 5000065
  6000078:  192-block  1
branch  2 taken 5000065
branch  3 taken 1000013 (fallthrough)
  5000065:  193:    drawCard(state->whoseTurn, state);
  5000065:  193-block  0
call    0 returned 5000065
        -:  194:  }
        -:  195:
  1000013:  196:  updateCoins(state->whoseTurn, state, 0);
  1000013:  196-block  0
call    0 returned 1000013
        -:  197:
  1000013:  198:  return 0;
unconditional  0 taken 1000013
        -:  199:}
        -:  200:
function shuffle called 2000026 returned 100% blocks executed 94%
  2000026:  201:int shuffle(int player, struct gameState *state) {
  2000026:  201-block  0
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
  2000026:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
  2000026:  209:  if (state->deckCount[player] < 1)
  2000026:  209-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2000026
    #####:  210:    return -1;
    $$$$$:  210-block  0
unconditional  0 never executed
  2000026:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
  2000026:  211-block  0
call    0 returned 2000026
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
 22000286:  214:  while (state->deckCount[player] > 0) {
unconditional  0 taken 2000026
 22000286:  214-block  0
branch  1 taken 20000260
branch  2 taken 2000026 (fallthrough)
 20000260:  215:    card = floor(Random() * state->deckCount[player]);
 20000260:  215-block  0
call    0 returned 20000260
 20000260:  216:    newDeck[newDeckPos] = state->deck[player][card];
 20000260:  217:    newDeckPos++;
 62000806:  218:    for (i = card; i < state->deckCount[player] - 1; i++) {
unconditional  0 taken 20000260
 42000546:  218-block  0
unconditional  1 taken 42000546
 62000806:  218-block  1
branch  2 taken 42000546
branch  3 taken 20000260 (fallthrough)
 42000546:  219:      state->deck[player][i] = state->deck[player][i + 1];
        -:  220:    }
 20000260:  221:    state->deckCount[player]--;
 20000260:  221-block  0
unconditional  0 taken 20000260
        -:  222:  }
 22000286:  223:  for (i = 0; i < newDeckPos; i++) {
  2000026:  223-block  0
unconditional  0 taken 2000026
 20000260:  223-block  1
unconditional  1 taken 20000260
 22000286:  223-block  2
branch  2 taken 20000260
branch  3 taken 2000026 (fallthrough)
 20000260:  224:    state->deck[player][i] = newDeck[i];
 20000260:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
  2000026:  228:  return 0;
  2000026:  228-block  0
unconditional  0 taken 2000026
  2000026:  228-block  1
unconditional  1 taken 2000026
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
    $$$$$:  231-block  0
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0;     //tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
    $$$$$:  237-block  0
branch  0 never executed
branch  1 never executed
        -:  238:  {
    #####:  239:    return -1;
    $$$$$:  239-block  0
unconditional  0 never executed
        -:  240:  }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
    $$$$$:  243-block  0
branch  0 never executed
branch  1 never executed
        -:  244:  {
    #####:  245:    return -1;
    $$$$$:  245-block  0
unconditional  0 never executed
        -:  246:  }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
    $$$$$:  249-block  0
call    0 never executed
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
    $$$$$:  252-block  0
branch  2 never executed
branch  3 never executed
        -:  253:  {
    #####:  254:    return -1;
    $$$$$:  254-block  0
unconditional  0 never executed
        -:  255:  }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
    $$$$$:  258-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:  {
    #####:  260:    return -1;
    $$$$$:  260-block  0
unconditional  0 never executed
        -:  261:  }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
    $$$$$:  267-block  0
call    0 never executed
        -:  268:
    #####:  269:  return 0;
unconditional  0 never executed
    $$$$$:  269-block  0
unconditional  1 never executed
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
    $$$$$:  272-block  0
    $$$$$:  272-block  1
unconditional  0 never executed
        -:  273:  int who;
        -:  274:  if (DEBUG) {
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1) {
    $$$$$:  282-block  0
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    $$$$$:  285-block  0
unconditional  0 never executed
    #####:  286:  } else if (supplyCount(supplyPos, state) < 1) {
    $$$$$:  286-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    $$$$$:  289-block  0
unconditional  0 never executed
    #####:  290:  } else if (state->coins < getCost(supplyPos)) {
    $$$$$:  290-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
    $$$$$:  293-block  0
unconditional  0 never executed
        -:  294:  } else {
    #####:  295:    state->phase = 1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
    $$$$$:  297-block  0
call    0 never executed
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
unconditional  0 never executed
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
    $$$$$:  308-block  0
unconditional  0 never executed
        -:  309:}
        -:  310:
function numHandCards called 3 returned 100% blocks executed 100%
        3:  311:int numHandCards(struct gameState *state) {
        3:  311-block  0
        3:  312:  return state->handCount[ whoseTurn(state) ];
        3:  312-block  0
call    0 returned 3
unconditional  1 taken 3
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    $$$$$:  315-block  0
    #####:  316:  int currentPlayer = whoseTurn(state);
    $$$$$:  316-block  0
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
unconditional  0 never executed
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    $$$$$:  320-block  0
    #####:  321:  return state->supplyCount[card];
    $$$$$:  321-block  0
unconditional  0 never executed
        -:  322:}
        -:  323:
function fullDeckCount called 3 returned 100% blocks executed 100%
        3:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        3:  324-block  0
        -:  325:  int i;
        3:  326:  int count = 0;
        -:  327:
      445:  328:  for (i = 0; i < state->deckCount[player]; i++)
        3:  328-block  0
unconditional  0 taken 3
      442:  328-block  1
unconditional  1 taken 442
      445:  328-block  2
branch  2 taken 442
branch  3 taken 3 (fallthrough)
        -:  329:  {
      442:  330:    if (state->deck[player][i] == card) count++;
      442:  330-block  0
branch  0 taken 302 (fallthrough)
branch  1 taken 140
      302:  330-block  1
unconditional  2 taken 302
        -:  331:  }
        -:  332:
      445:  333:  for (i = 0; i < state->handCount[player]; i++)
        3:  333-block  0
unconditional  0 taken 3
      442:  333-block  1
unconditional  1 taken 442
      445:  333-block  2
branch  2 taken 442
branch  3 taken 3 (fallthrough)
        -:  334:  {
      442:  335:    if (state->hand[player][i] == card) count++;
      442:  335-block  0
branch  0 taken 302 (fallthrough)
branch  1 taken 140
      302:  335-block  1
unconditional  2 taken 302
        -:  336:  }
        -:  337:
      445:  338:  for (i = 0; i < state->discardCount[player]; i++)
        3:  338-block  0
unconditional  0 taken 3
      442:  338-block  1
unconditional  1 taken 442
      445:  338-block  2
branch  2 taken 442
branch  3 taken 3 (fallthrough)
        -:  339:  {
      442:  340:    if (state->discard[player][i] == card) count++;
      442:  340-block  0
branch  0 taken 302 (fallthrough)
branch  1 taken 140
      302:  340-block  1
unconditional  2 taken 302
        -:  341:  }
        -:  342:
        3:  343:  return count;
        3:  343-block  0
unconditional  0 taken 3
        -:  344:}
        -:  345:
function whoseTurn called 1000020 returned 100% blocks executed 100%
  1000020:  346:int whoseTurn(struct gameState *state) {
  1000020:  346-block  0
  1000020:  347:  return state->whoseTurn;
  1000020:  347-block  0
unconditional  0 taken 1000020
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
    $$$$$:  350-block  0
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
    $$$$$:  353-block  0
call    0 never executed
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++) {
unconditional  0 never executed
    $$$$$:  356-block  0
unconditional  1 never executed
    $$$$$:  356-block  1
branch  2 never executed
branch  3 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)) {
    $$$$$:  363-block  0
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    $$$$$:  364-block  0
unconditional  0 never executed
        -:  365:  }
        -:  366:  else {
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
    $$$$$:  367-block  0
unconditional  0 never executed
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++) {
    $$$$$:  380-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$:  380-block  1
branch  2 never executed
branch  3 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    $$$$$:  381-block  0
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
    $$$$$:  385-block  0
call    0 never executed
        -:  386:
    #####:  387:  return 0;
unconditional  0 never executed
        -:  388:}
        -:  389:
function isGameOver called 9 returned 100% blocks executed 100%
        9:  390:int isGameOver(struct gameState *state) {
        9:  390-block  0
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
        9:  395:  if (state->supplyCount[province] == 0)
        9:  395-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 6
        -:  396:  {
        3:  397:    return 1;
        3:  397-block  0
unconditional  0 taken 3
        -:  398:  }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        6:  401:  j = 0;
      156:  402:  for (i = 0; i < 25; i++)
        6:  402-block  0
unconditional  0 taken 6
      150:  402-block  1
unconditional  1 taken 150
      156:  402-block  2
branch  2 taken 150
branch  3 taken 6 (fallthrough)
        -:  403:  {
      150:  404:    if (state->supplyCount[i] == 0)
      150:  404-block  0
branch  0 taken 9 (fallthrough)
branch  1 taken 141
        -:  405:    {
        9:  406:      j++;
        9:  406-block  0
unconditional  0 taken 9
        -:  407:    }
        -:  408:  }
        6:  409:  if ( j >= 3)
        6:  409-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 3
        -:  410:  {
        3:  411:    return 1;
        3:  411-block  0
unconditional  0 taken 3
        -:  412:  }
        -:  413:
        3:  414:  return 0;
        3:  414-block  0
unconditional  0 taken 3
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
    $$$$$:  417-block  0
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
    $$$$$:  422-block  0
unconditional  0 never executed
    $$$$$:  422-block  1
unconditional  1 never executed
    $$$$$:  422-block  2
branch  2 never executed
branch  3 never executed
        -:  423:  {
    #####:  424:    if (state->hand[player][i] == curse) { score = score - 1; };
    $$$$$:  424-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  424-block  1
unconditional  2 never executed
    #####:  425:    if (state->hand[player][i] == estate) { score = score + 1; };
    $$$$$:  425-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  425-block  1
unconditional  2 never executed
    #####:  426:    if (state->hand[player][i] == duchy) { score = score + 3; };
    $$$$$:  426-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  426-block  1
unconditional  2 never executed
    #####:  427:    if (state->hand[player][i] == province) { score = score + 6; };
    $$$$$:  427-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  427-block  1
unconditional  2 never executed
    #####:  428:    if (state->hand[player][i] == great_hall) { score = score + 1; };
    $$$$$:  428-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  428-block  1
unconditional  2 never executed
    #####:  429:    if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  429-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  429-block  1
call    2 never executed
unconditional  3 never executed
        -:  430:  }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  433-block  0
unconditional  0 never executed
    $$$$$:  433-block  1
unconditional  1 never executed
    $$$$$:  433-block  2
branch  2 never executed
branch  3 never executed
        -:  434:  {
    #####:  435:    if (state->discard[player][i] == curse) { score = score - 1; };
    $$$$$:  435-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  435-block  1
unconditional  2 never executed
    #####:  436:    if (state->discard[player][i] == estate) { score = score + 1; };
    $$$$$:  436-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  436-block  1
unconditional  2 never executed
    #####:  437:    if (state->discard[player][i] == duchy) { score = score + 3; };
    $$$$$:  437-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  437-block  1
unconditional  2 never executed
    #####:  438:    if (state->discard[player][i] == province) { score = score + 6; };
    $$$$$:  438-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  438-block  1
unconditional  2 never executed
    #####:  439:    if (state->discard[player][i] == great_hall) { score = score + 1; };
    $$$$$:  439-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  439-block  1
unconditional  2 never executed
    #####:  440:    if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  440-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  440-block  1
call    2 never executed
unconditional  3 never executed
        -:  441:  }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  444-block  0
unconditional  0 never executed
    $$$$$:  444-block  1
unconditional  1 never executed
    $$$$$:  444-block  2
branch  2 never executed
branch  3 never executed
        -:  445:  {
    #####:  446:    if (state->deck[player][i] == curse) { score = score - 1; };
    $$$$$:  446-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  446-block  1
unconditional  2 never executed
    #####:  447:    if (state->deck[player][i] == estate) { score = score + 1; };
    $$$$$:  447-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  447-block  1
unconditional  2 never executed
    #####:  448:    if (state->deck[player][i] == duchy) { score = score + 3; };
    $$$$$:  448-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  448-block  1
unconditional  2 never executed
    #####:  449:    if (state->deck[player][i] == province) { score = score + 6; };
    $$$$$:  449-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  449-block  1
unconditional  2 never executed
    #####:  450:    if (state->deck[player][i] == great_hall) { score = score + 1; };
    $$$$$:  450-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  450-block  1
unconditional  2 never executed
    #####:  451:    if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  451-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  451-block  1
call    2 never executed
unconditional  3 never executed
        -:  452:  }
        -:  453:
    #####:  454:  return score;
    $$$$$:  454-block  0
unconditional  0 never executed
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
    $$$$$:  457-block  0
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  464-block  0
unconditional  0 never executed
    $$$$$:  464-block  1
unconditional  1 never executed
    $$$$$:  464-block  2
branch  2 never executed
branch  3 never executed
        -:  465:  {
        -:  466:    //set unused player scores to -9999
    #####:  467:    if (i >= state->numPlayers)
    $$$$$:  467-block  0
branch  0 never executed
branch  1 never executed
        -:  468:    {
    #####:  469:      players[i] = -9999;
    $$$$$:  469-block  0
unconditional  0 never executed
        -:  470:    }
        -:  471:    else
        -:  472:    {
    #####:  473:      players[i] = scoreFor (i, state);
    $$$$$:  473-block  0
call    0 never executed
unconditional  1 never executed
        -:  474:    }
        -:  475:  }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  479-block  0
unconditional  0 never executed
    $$$$$:  479-block  1
unconditional  1 never executed
    $$$$$:  479-block  2
branch  2 never executed
branch  3 never executed
        -:  480:  {
    #####:  481:    if (players[i] > players[j])
    $$$$$:  481-block  0
branch  0 never executed
branch  1 never executed
        -:  482:    {
    #####:  483:      j = i;
    $$$$$:  483-block  0
unconditional  0 never executed
        -:  484:    }
        -:  485:  }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    $$$$$:  489-block  0
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
unconditional  0 never executed
    $$$$$:  490-block  0
unconditional  1 never executed
    $$$$$:  490-block  1
branch  2 never executed
branch  3 never executed
        -:  491:  {
    #####:  492:    if ( players[i] == highScore && i > currentPlayer )
    $$$$$:  492-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  492-block  1
branch  2 never executed
branch  3 never executed
        -:  493:    {
    #####:  494:      players[i]++;
    $$$$$:  494-block  0
unconditional  0 never executed
        -:  495:    }
        -:  496:  }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  500-block  0
unconditional  0 never executed
    $$$$$:  500-block  1
unconditional  1 never executed
    $$$$$:  500-block  2
branch  2 never executed
branch  3 never executed
        -:  501:  {
    #####:  502:    if ( players[i] > players[j] )
    $$$$$:  502-block  0
branch  0 never executed
branch  1 never executed
        -:  503:    {
    #####:  504:      j = i;
    $$$$$:  504-block  0
unconditional  0 never executed
        -:  505:    }
        -:  506:  }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  510-block  0
unconditional  0 never executed
    $$$$$:  510-block  1
unconditional  1 never executed
    $$$$$:  510-block  2
branch  2 never executed
branch  3 never executed
        -:  511:  {
    #####:  512:    if ( players[i] == highScore )
    $$$$$:  512-block  0
branch  0 never executed
branch  1 never executed
        -:  513:    {
    #####:  514:      players[i] = 1;
    $$$$$:  514-block  0
unconditional  0 never executed
        -:  515:    }
        -:  516:    else
        -:  517:    {
    #####:  518:      players[i] = 0;
    $$$$$:  518-block  0
unconditional  0 never executed
        -:  519:    }
        -:  520:  }
        -:  521:
    #####:  522:  return 0;
    $$$$$:  522-block  0
unconditional  0 never executed
        -:  523:}
        -:  524:
function drawCard called 5500083 returned 100% blocks executed 38%
  5500083:  525:int drawCard(int player, struct gameState *state)
  5500083:  525-block  0
        -:  526:{ int count;
        -:  527:  int deckCounter;
  5500083:  528:  if (state->deckCount[player] <= 0) { //Deck is empty
  5500083:  528-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 5500083
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player]; i++) {
    $$$$$:  533-block  0
unconditional  0 never executed
    $$$$$:  533-block  1
unconditional  1 never executed
    $$$$$:  533-block  2
branch  2 never executed
branch  3 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
    $$$$$:  542-block  0
call    0 never executed
        -:  543:
        -:  544:    if (DEBUG) { //Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
unconditional  0 never executed
        -:  552:
        -:  553:    if (DEBUG) { //Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    $$$$$:  559-block  0
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
    $$$$$:  560-block  0
unconditional  0 never executed
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
    $$$$$:  564-block  0
unconditional  0 never executed
        -:  565:  }
        -:  566:
        -:  567:  else {
  5500083:  568:    int count = state->handCount[player];//Get current hand count for player
  5500083:  568-block  0
unconditional  0 taken 5500083
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG) { //Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
  5500083:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
  5500083:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
  5500083:  576:    state->deckCount[player]--;
  5500083:  577:    state->handCount[player]++;//Increment hand count
  5500083:  577-block  0
unconditional  0 taken 5500083
        -:  578:  }
        -:  579:
  5500083:  580:  return 0;
  5500083:  580-block  0
unconditional  0 taken 5500083
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
    $$$$$:  583-block  0
        -:  584:{
    #####:  585:  switch ( cardNumber )
    $$$$$:  585-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:  {
        -:  587:  case curse:
    #####:  588:    return 0;
    $$$$$:  588-block  0
unconditional  0 never executed
        -:  589:  case estate:
    #####:  590:    return 2;
    $$$$$:  590-block  0
unconditional  0 never executed
        -:  591:  case duchy:
    #####:  592:    return 5;
    $$$$$:  592-block  0
unconditional  0 never executed
        -:  593:  case province:
    #####:  594:    return 8;
    $$$$$:  594-block  0
unconditional  0 never executed
        -:  595:  case copper:
    #####:  596:    return 0;
    $$$$$:  596-block  0
unconditional  0 never executed
        -:  597:  case silver:
    #####:  598:    return 3;
    $$$$$:  598-block  0
unconditional  0 never executed
        -:  599:  case gold:
    #####:  600:    return 6;
    $$$$$:  600-block  0
unconditional  0 never executed
        -:  601:  case adventurer:
    #####:  602:    return 6;
    $$$$$:  602-block  0
unconditional  0 never executed
        -:  603:  case council_room:
    #####:  604:    return 5;
    $$$$$:  604-block  0
unconditional  0 never executed
        -:  605:  case feast:
    #####:  606:    return 4;
    $$$$$:  606-block  0
unconditional  0 never executed
        -:  607:  case gardens:
    #####:  608:    return 4;
    $$$$$:  608-block  0
unconditional  0 never executed
        -:  609:  case mine:
    #####:  610:    return 5;
    $$$$$:  610-block  0
unconditional  0 never executed
        -:  611:  case remodel:
    #####:  612:    return 4;
    $$$$$:  612-block  0
unconditional  0 never executed
        -:  613:  case smithy:
    #####:  614:    return 4;
    $$$$$:  614-block  0
unconditional  0 never executed
        -:  615:  case village:
    #####:  616:    return 3;
    $$$$$:  616-block  0
unconditional  0 never executed
        -:  617:  case baron:
    #####:  618:    return 4;
    $$$$$:  618-block  0
unconditional  0 never executed
        -:  619:  case great_hall:
    #####:  620:    return 3;
    $$$$$:  620-block  0
unconditional  0 never executed
        -:  621:  case minion:
    #####:  622:    return 5;
    $$$$$:  622-block  0
unconditional  0 never executed
        -:  623:  case steward:
    #####:  624:    return 3;
    $$$$$:  624-block  0
unconditional  0 never executed
        -:  625:  case tribute:
    #####:  626:    return 5;
    $$$$$:  626-block  0
unconditional  0 never executed
        -:  627:  case ambassador:
    #####:  628:    return 3;
    $$$$$:  628-block  0
unconditional  0 never executed
        -:  629:  case cutpurse:
    #####:  630:    return 4;
    $$$$$:  630-block  0
unconditional  0 never executed
        -:  631:  case embargo:
    #####:  632:    return 2;
    $$$$$:  632-block  0
unconditional  0 never executed
        -:  633:  case outpost:
    #####:  634:    return 5;
    $$$$$:  634-block  0
unconditional  0 never executed
        -:  635:  case salvager:
    #####:  636:    return 4;
    $$$$$:  636-block  0
unconditional  0 never executed
        -:  637:  case sea_hag:
    #####:  638:    return 4;
    $$$$$:  638-block  0
unconditional  0 never executed
        -:  639:  case treasure_map:
    #####:  640:    return 4;
    $$$$$:  640-block  0
unconditional  0 never executed
        -:  641:  }
        -:  642:
    #####:  643:  return -1;
    $$$$$:  643-block  0
unconditional  0 never executed
        -:  644:}
        -:  645:
function cardEffect called 500009 returned 100% blocks executed 5%
   500009:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
   500009:  646-block  0
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
   500009:  653:  int currentPlayer = whoseTurn(state);
   500009:  653-block  0
call    0 returned 500009
   500009:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
   500009:  656:  int tributeRevealedCards[2] = { -1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
   500009:  658:  int drawntreasure = 0;
        -:  659:  int cardDrawn;
   500009:  660:  int z = 0;// this is the counter for the temp hand
   500009:  661:  if (nextPlayer > (state->numPlayers - 1)) {
branch  0 taken 0 (fallthrough)
branch  1 taken 500009
    #####:  662:    nextPlayer = 0;
    $$$$$:  662-block  0
unconditional  0 never executed
        -:  663:  }
        -:  664:
        -:  665:
        -:  666:  //uses switch to select card and perform actions
   500009:  667:  switch ( card )
   500009:  667-block  0
branch  0 taken 500001
branch  1 taken 1
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
branch  6 taken 6
branch  7 taken 0
branch  8 taken 0
branch  9 taken 0
branch 10 taken 0
branch 11 taken 0
branch 12 taken 0
branch 13 taken 0
branch 14 taken 0
branch 15 taken 0
branch 16 taken 0
branch 17 taken 0
branch 18 taken 0
branch 19 taken 1
        -:  668:  {
        -:  669:  case adventurer:
   500001:  670:    adventurer_function(state); //CHANGED
   500001:  670-block  0
call    0 returned 500001
   500001:  671:    break;
unconditional  0 taken 500001
        -:  672:
        -:  673:  case council_room:
        1:  674:    council_room_function(state, handPos); //CHANGED
        1:  674-block  0
call    0 returned 1
        1:  675:    break;
unconditional  0 taken 1
        -:  676:
        -:  677:
        -:  678:  case feast:
        -:  679:    //gain card with cost up to 5
        -:  680:    //Backup hand
    #####:  681:    for (i = 0; i <= state->handCount[currentPlayer]; i++) {
    $$$$$:  681-block  0
unconditional  0 never executed
    $$$$$:  681-block  1
unconditional  1 never executed
    $$$$$:  681-block  2
branch  2 never executed
branch  3 never executed
    #####:  682:      temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  683:      state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  684:    }
        -:  685:    //Backup hand
        -:  686:
        -:  687:    //Update Coins for Buy
    #####:  688:    updateCoins(currentPlayer, state, 5);
    $$$$$:  688-block  0
call    0 never executed
    #####:  689:    x = 1;//Condition to loop on
    #####:  690:    while ( x == 1) { //Buy one card
unconditional  0 never executed
    $$$$$:  690-block  0
branch  1 never executed
branch  2 never executed
    #####:  691:      if (supplyCount(choice1, state) <= 0) {
    $$$$$:  691-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  692:        if (DEBUG)
        -:  693:          printf("None of that card left, sorry!\n");
        -:  694:
        -:  695:        if (DEBUG) {
        -:  696:          printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  697:        }
        -:  698:      }
    #####:  699:      else if (state->coins < getCost(choice1)) {
    $$$$$:  699-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  700:        printf("That card is too expensive!\n");
    $$$$$:  700-block  0
call    0 never executed
unconditional  1 never executed
        -:  701:
        -:  702:        if (DEBUG) {
        -:  703:          printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  704:        }
        -:  705:      }
        -:  706:      else {
        -:  707:
        -:  708:        if (DEBUG) {
        -:  709:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  710:        }
        -:  711:
    #####:  712:        gainCard(choice1, state, 0, currentPlayer);//Gain the card
    $$$$$:  712-block  0
call    0 never executed
    #####:  713:        x = 0;//No more buying cards
unconditional  0 never executed
        -:  714:
        -:  715:        if (DEBUG) {
        -:  716:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  717:        }
        -:  718:
        -:  719:      }
        -:  720:    }
        -:  721:
        -:  722:    //Reset Hand
    #####:  723:    for (i = 0; i <= state->handCount[currentPlayer]; i++) {
    $$$$$:  723-block  0
unconditional  0 never executed
    $$$$$:  723-block  1
unconditional  1 never executed
    $$$$$:  723-block  2
branch  2 never executed
branch  3 never executed
    #####:  724:      state->hand[currentPlayer][i] = temphand[i];
    #####:  725:      temphand[i] = -1;
        -:  726:    }
        -:  727:    //Reset Hand
        -:  728:
    #####:  729:    return 0;
    $$$$$:  729-block  0
unconditional  0 never executed
        -:  730:
        -:  731:  case gardens:
    #####:  732:    return -1;
    $$$$$:  732-block  0
unconditional  0 never executed
        -:  733:
        -:  734:  case mine:
    #####:  735:    j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  736:
    #####:  737:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
    $$$$$:  737-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  737-block  1
branch  2 never executed
branch  3 never executed
        -:  738:    {
    #####:  739:      return -1;
    $$$$$:  739-block  0
unconditional  0 never executed
        -:  740:    }
        -:  741:
    #####:  742:    if (choice2 > treasure_map || choice2 < curse)
    $$$$$:  742-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  742-block  1
branch  2 never executed
branch  3 never executed
        -:  743:    {
    #####:  744:      return -1;
    $$$$$:  744-block  0
unconditional  0 never executed
        -:  745:    }
        -:  746:
    #####:  747:    if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
    $$$$$:  747-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  748:    {
    #####:  749:      return -1;
    $$$$$:  749-block  0
unconditional  0 never executed
        -:  750:    }
        -:  751:
    #####:  752:    gainCard(choice2, state, 2, currentPlayer);
    $$$$$:  752-block  0
call    0 never executed
        -:  753:
        -:  754:    //discard card from hand
    #####:  755:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  756:
        -:  757:    //discard trashed card
    #####:  758:    for (i = 0; i < state->handCount[currentPlayer]; i++)
unconditional  0 never executed
    $$$$$:  758-block  0
unconditional  1 never executed
    $$$$$:  758-block  1
branch  2 never executed
branch  3 never executed
        -:  759:    {
    #####:  760:      if (state->hand[currentPlayer][i] == j)
    $$$$$:  760-block  0
branch  0 never executed
branch  1 never executed
        -:  761:      {
    #####:  762:        discardCard(i, currentPlayer, state, 0);
    $$$$$:  762-block  0
call    0 never executed
    #####:  763:        break;
unconditional  0 never executed
        -:  764:      }
        -:  765:    }
        -:  766:
    #####:  767:    return 0;
    $$$$$:  767-block  0
unconditional  0 never executed
        -:  768:
        -:  769:  case remodel:
    #####:  770:    remodel_function(state, choice1, choice2, currentPlayer, handPos);
    $$$$$:  770-block  0
call    0 never executed
    #####:  771:    break;
unconditional  0 never executed
        -:  772:
        -:  773:  case smithy:
        6:  774:    smithy_function(state, handPos); //CHANGED
        6:  774-block  0
call    0 returned 6
        6:  775:    break;
unconditional  0 taken 6
        -:  776:
        -:  777:  case baron:
    #####:  778:    state->numBuys++;//Increase buys by 1!
    #####:  779:    if (choice1 > 0) { //Boolean true or going to discard an estate
    $$$$$:  779-block  0
branch  0 never executed
branch  1 never executed
    #####:  780:      int p = 0;//Iterator for hand!
    #####:  781:      int card_not_discarded = 1;//Flag for discard set!
    #####:  782:      while (card_not_discarded) {
    $$$$$:  782-block  0
unconditional  0 never executed
    $$$$$:  782-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  782-block  2
unconditional  3 never executed
    #####:  783:        if (state->hand[currentPlayer][p] == estate) { //Found an estate card!
    $$$$$:  783-block  0
branch  0 never executed
branch  1 never executed
    #####:  784:          state->coins += 4;//Add 4 coins to the amount of coins
    #####:  785:          state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  786:          state->discardCount[currentPlayer]++;
    #####:  787:          for (; p < state->handCount[currentPlayer]; p++) {
    $$$$$:  787-block  0
unconditional  0 never executed
    $$$$$:  787-block  1
unconditional  1 never executed
    $$$$$:  787-block  2
branch  2 never executed
branch  3 never executed
    #####:  788:            state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -:  789:          }
    #####:  790:          state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  791:          state->handCount[currentPlayer]--;
    #####:  792:          card_not_discarded = 0;//Exit the loop
    $$$$$:  792-block  0
unconditional  0 never executed
        -:  793:        }
    #####:  794:        else if (p > state->handCount[currentPlayer]) {
    $$$$$:  794-block  0
branch  0 never executed
branch  1 never executed
        -:  795:          if (DEBUG) {
        -:  796:            printf("No estate cards in your hand, invalid choice\n");
        -:  797:            printf("Must gain an estate if there are any\n");
        -:  798:          }
    #####:  799:          if (supplyCount(estate, state) > 0) {
    $$$$$:  799-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  800:            gainCard(estate, state, 0, currentPlayer);
    $$$$$:  800-block  0
call    0 never executed
    #####:  801:            state->supplyCount[estate]--;//Decrement estates
    #####:  802:            if (supplyCount(estate, state) == 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  803:              isGameOver(state);
    $$$$$:  803-block  0
call    0 never executed
unconditional  1 never executed
        -:  804:            }
        -:  805:          }
    #####:  806:          card_not_discarded = 0;//Exit the loop
    $$$$$:  806-block  0
unconditional  0 never executed
        -:  807:        }
        -:  808:
        -:  809:        else {
    #####:  810:          p++;//Next card
    $$$$$:  810-block  0
unconditional  0 never executed
        -:  811:        }
        -:  812:      }
        -:  813:    }
        -:  814:
        -:  815:    else {
    #####:  816:      if (supplyCount(estate, state) > 0) {
    $$$$$:  816-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  817:        gainCard(estate, state, 0, currentPlayer);//Gain an estate
    $$$$$:  817-block  0
call    0 never executed
    #####:  818:        state->supplyCount[estate]--;//Decrement Estates
    #####:  819:        if (supplyCount(estate, state) == 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  820:          isGameOver(state);
    $$$$$:  820-block  0
call    0 never executed
unconditional  1 never executed
        -:  821:        }
        -:  822:      }
        -:  823:    }
        -:  824:
        -:  825:
    #####:  826:    return 0;
    $$$$$:  826-block  0
unconditional  0 never executed
        -:  827:
        -:  828:  case great_hall:
    #####:  829:    great_hall_function(state, handPos); // CHANGED
    $$$$$:  829-block  0
call    0 never executed
    #####:  830:    break;
unconditional  0 never executed
        -:  831:
        -:  832:  case minion:
        -:  833:    //+1 action
    #####:  834:    state->numActions++;
        -:  835:
        -:  836:    //discard card from hand
    #####:  837:    discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  837-block  0
call    0 never executed
        -:  838:
    #####:  839:    if (choice1)    //+2 coins
branch  0 never executed
branch  1 never executed
        -:  840:    {
    #####:  841:      state->coins = state->coins + 2;
    $$$$$:  841-block  0
unconditional  0 never executed
        -:  842:    }
        -:  843:
    #####:  844:    else if (choice2)   //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
    $$$$$:  844-block  0
branch  0 never executed
branch  1 never executed
        -:  845:    {
        -:  846:      //discard hand
    #####:  847:      while (numHandCards(state) > 0)
    $$$$$:  847-block  0
unconditional  0 never executed
    $$$$$:  847-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  848:      {
    #####:  849:        discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  849-block  0
call    0 never executed
unconditional  1 never executed
        -:  850:      }
        -:  851:
        -:  852:      //draw 4
    #####:  853:      for (i = 0; i < 4; i++)
    $$$$$:  853-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$:  853-block  1
branch  2 never executed
branch  3 never executed
        -:  854:      {
    #####:  855:        drawCard(currentPlayer, state);
    $$$$$:  855-block  0
call    0 never executed
        -:  856:      }
        -:  857:
        -:  858:      //other players discard hand and redraw if hand size > 4
    #####:  859:      for (i = 0; i < state->numPlayers; i++)
    $$$$$:  859-block  0
unconditional  0 never executed
    $$$$$:  859-block  1
unconditional  1 never executed
    $$$$$:  859-block  2
branch  2 never executed
branch  3 never executed
        -:  860:      {
    #####:  861:        if (i != currentPlayer)
    $$$$$:  861-block  0
branch  0 never executed
branch  1 never executed
        -:  862:        {
    #####:  863:          if ( state->handCount[i] > 4 )
    $$$$$:  863-block  0
branch  0 never executed
branch  1 never executed
        -:  864:          {
        -:  865:            //discard hand
    #####:  866:            while ( state->handCount[i] > 0 )
    $$$$$:  866-block  0
unconditional  0 never executed
    $$$$$:  866-block  1
branch  1 never executed
branch  2 never executed
        -:  867:            {
    #####:  868:              discardCard(handPos, i, state, 0);
    $$$$$:  868-block  0
call    0 never executed
unconditional  1 never executed
        -:  869:            }
        -:  870:
        -:  871:            //draw 4
    #####:  872:            for (j = 0; j < 4; j++)
    $$$$$:  872-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$:  872-block  1
branch  2 never executed
branch  3 never executed
        -:  873:            {
    #####:  874:              drawCard(i, state);
    $$$$$:  874-block  0
call    0 never executed
        -:  875:            }
        -:  876:          }
        -:  877:        }
        -:  878:      }
        -:  879:
        -:  880:    }
    #####:  881:    return 0;
    $$$$$:  881-block  0
unconditional  0 never executed
        -:  882:
        -:  883:  case steward:
    #####:  884:    if (choice1 == 1)
    $$$$$:  884-block  0
branch  0 never executed
branch  1 never executed
        -:  885:    {
        -:  886:      //+2 cards
    #####:  887:      drawCard(currentPlayer, state);
    $$$$$:  887-block  0
call    0 never executed
    #####:  888:      drawCard(currentPlayer, state);
call    0 never executed
unconditional  1 never executed
        -:  889:    }
    #####:  890:    else if (choice1 == 2)
    $$$$$:  890-block  0
branch  0 never executed
branch  1 never executed
        -:  891:    {
        -:  892:      //+2 coins
    #####:  893:      state->coins = state->coins + 2;
    $$$$$:  893-block  0
unconditional  0 never executed
        -:  894:    }
        -:  895:    else
        -:  896:    {
        -:  897:      //trash 2 cards in hand
    #####:  898:      discardCard(choice2, currentPlayer, state, 1);
    $$$$$:  898-block  0
call    0 never executed
    #####:  899:      discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
unconditional  1 never executed
        -:  900:    }
        -:  901:
        -:  902:    //discard card from hand
    #####:  903:    discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  903-block  0
call    0 never executed
    #####:  904:    return 0;
unconditional  0 never executed
        -:  905:
        -:  906:  case tribute:
    #####:  907:    if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1) {
    $$$$$:  907-block  0
branch  0 never executed
branch  1 never executed
    #####:  908:      if (state->deckCount[nextPlayer] > 0) {
    $$$$$:  908-block  0
branch  0 never executed
branch  1 never executed
    #####:  909:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  910:        state->deckCount[nextPlayer]--;
    $$$$$:  910-block  0
unconditional  0 never executed
        -:  911:      }
    #####:  912:      else if (state->discardCount[nextPlayer] > 0) {
    $$$$$:  912-block  0
branch  0 never executed
branch  1 never executed
    #####:  913:        tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####:  914:        state->discardCount[nextPlayer]--;
    $$$$$:  914-block  0
unconditional  0 never executed
        -:  915:      }
        -:  916:      else {
        -:  917:        //No Card to Reveal
        -:  918:        if (DEBUG) {
        -:  919:          printf("No cards to reveal\n");
        -:  920:        }
        -:  921:      }
        -:  922:    }
        -:  923:
        -:  924:    else {
    #####:  925:      if (state->deckCount[nextPlayer] == 0) {
    $$$$$:  925-block  0
branch  0 never executed
branch  1 never executed
    #####:  926:        for (i = 0; i < state->discardCount[nextPlayer]; i++) {
    $$$$$:  926-block  0
unconditional  0 never executed
    $$$$$:  926-block  1
unconditional  1 never executed
    $$$$$:  926-block  2
branch  2 never executed
branch  3 never executed
    #####:  927:          state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  928:          state->deckCount[nextPlayer]++;
    #####:  929:          state->discard[nextPlayer][i] = -1;
    #####:  930:          state->discardCount[nextPlayer]--;
        -:  931:        }
        -:  932:
    #####:  933:        shuffle(nextPlayer, state); //Shuffle the deck
    $$$$$:  933-block  0
call    0 never executed
unconditional  1 never executed
        -:  934:      }
    #####:  935:      tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  936:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  937:      state->deckCount[nextPlayer]--;
    #####:  938:      tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  939:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  940:      state->deckCount[nextPlayer]--;
    $$$$$:  940-block  0
unconditional  0 never executed
        -:  941:    }
        -:  942:
    #####:  943:    if (tributeRevealedCards[0] == tributeRevealedCards[1]) { //If we have a duplicate card, just drop one
    $$$$$:  943-block  0
branch  0 never executed
branch  1 never executed
    #####:  944:      state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  945:      state->playedCardCount++;
    #####:  946:      tributeRevealedCards[1] = -1;
    $$$$$:  946-block  0
unconditional  0 never executed
        -:  947:    }
        -:  948:
    #####:  949:    for (i = 0; i <= 2; i ++) {
    $$$$$:  949-block  0
unconditional  0 never executed
    $$$$$:  949-block  1
unconditional  1 never executed
    $$$$$:  949-block  2
branch  2 never executed
branch  3 never executed
    #####:  950:      if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold) { //Treasure cards
    $$$$$:  950-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  950-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  950-block  2
branch  4 never executed
branch  5 never executed
    #####:  951:        state->coins += 2;
    $$$$$:  951-block  0
unconditional  0 never executed
        -:  952:      }
        -:  953:
    #####:  954:      else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall) { //Victory Card Found
    $$$$$:  954-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  954-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  954-block  2
branch  4 never executed
branch  5 never executed
    $$$$$:  954-block  3
branch  6 never executed
branch  7 never executed
    $$$$$:  954-block  4
branch  8 never executed
branch  9 never executed
    #####:  955:        drawCard(currentPlayer, state);
    $$$$$:  955-block  0
call    0 never executed
    #####:  956:        drawCard(currentPlayer, state);
call    0 never executed
unconditional  1 never executed
        -:  957:      }
        -:  958:      else { //Action Card
    #####:  959:        state->numActions = state->numActions + 2;
    $$$$$:  959-block  0
unconditional  0 never executed
        -:  960:      }
        -:  961:    }
        -:  962:
    #####:  963:    return 0;
    $$$$$:  963-block  0
unconditional  0 never executed
        -:  964:
        -:  965:  case ambassador:
    #####:  966:    j = 0;    //used to check if player has enough cards to discard
        -:  967:
    #####:  968:    if (choice2 > 2 || choice2 < 0)
    $$$$$:  968-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  968-block  1
branch  2 never executed
branch  3 never executed
        -:  969:    {
    #####:  970:      return -1;
    $$$$$:  970-block  0
unconditional  0 never executed
        -:  971:    }
        -:  972:
    #####:  973:    if (choice1 == handPos)
    $$$$$:  973-block  0
branch  0 never executed
branch  1 never executed
        -:  974:    {
    #####:  975:      return -1;
    $$$$$:  975-block  0
unconditional  0 never executed
        -:  976:    }
        -:  977:
    #####:  978:    for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$:  978-block  0
unconditional  0 never executed
    $$$$$:  978-block  1
unconditional  1 never executed
    $$$$$:  978-block  2
branch  2 never executed
branch  3 never executed
        -:  979:    {
    #####:  980:      if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
    $$$$$:  980-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  980-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  980-block  2
branch  4 never executed
branch  5 never executed
        -:  981:      {
    #####:  982:        j++;
    $$$$$:  982-block  0
unconditional  0 never executed
        -:  983:      }
        -:  984:    }
    #####:  985:    if (j < choice2)
    $$$$$:  985-block  0
branch  0 never executed
branch  1 never executed
        -:  986:    {
    #####:  987:      return -1;
    $$$$$:  987-block  0
unconditional  0 never executed
        -:  988:    }
        -:  989:
        -:  990:    if (DEBUG)
        -:  991:      printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  992:
        -:  993:    //increase supply count for choosen card by amount being discarded
    #####:  994:    state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  995:
        -:  996:    //each other player gains a copy of revealed card
    #####:  997:    for (i = 0; i < state->numPlayers; i++)
    $$$$$:  997-block  0
unconditional  0 never executed
    $$$$$:  997-block  1
unconditional  1 never executed
    $$$$$:  997-block  2
branch  2 never executed
branch  3 never executed
        -:  998:    {
    #####:  999:      if (i != currentPlayer)
    $$$$$:  999-block  0
branch  0 never executed
branch  1 never executed
        -: 1000:      {
    #####: 1001:        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    $$$$$: 1001-block  0
call    0 never executed
unconditional  1 never executed
        -: 1002:      }
        -: 1003:    }
        -: 1004:
        -: 1005:    //discard played card from hand
    #####: 1006:    discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1006-block  0
call    0 never executed
        -: 1007:
        -: 1008:    //trash copies of cards returned to supply
    #####: 1009:    for (j = 0; j < choice2; j++)
unconditional  0 never executed
    $$$$$: 1009-block  0
unconditional  1 never executed
    $$$$$: 1009-block  1
branch  2 never executed
branch  3 never executed
        -: 1010:    {
    #####: 1011:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1011-block  0
unconditional  0 never executed
    $$$$$: 1011-block  1
unconditional  1 never executed
    $$$$$: 1011-block  2
branch  2 never executed
branch  3 never executed
        -: 1012:      {
    #####: 1013:        if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
    $$$$$: 1013-block  0
branch  0 never executed
branch  1 never executed
        -: 1014:        {
    #####: 1015:          discardCard(i, currentPlayer, state, 1);
    $$$$$: 1015-block  0
call    0 never executed
    #####: 1016:          break;
unconditional  0 never executed
        -: 1017:        }
        -: 1018:      }
        -: 1019:    }
        -: 1020:
    #####: 1021:    return 0;
    $$$$$: 1021-block  0
unconditional  0 never executed
        -: 1022:
        -: 1023:  case cutpurse:
        -: 1024:
    #####: 1025:    updateCoins(currentPlayer, state, 2);
    $$$$$: 1025-block  0
call    0 never executed
    #####: 1026:    for (i = 0; i < state->numPlayers; i++)
unconditional  0 never executed
    $$$$$: 1026-block  0
unconditional  1 never executed
    $$$$$: 1026-block  1
branch  2 never executed
branch  3 never executed
        -: 1027:    {
    #####: 1028:      if (i != currentPlayer)
    $$$$$: 1028-block  0
branch  0 never executed
branch  1 never executed
        -: 1029:      {
    #####: 1030:        for (j = 0; j < state->handCount[i]; j++)
    $$$$$: 1030-block  0
unconditional  0 never executed
    $$$$$: 1030-block  1
unconditional  1 never executed
    $$$$$: 1030-block  2
branch  2 never executed
branch  3 never executed
        -: 1031:        {
    #####: 1032:          if (state->hand[i][j] == copper)
    $$$$$: 1032-block  0
branch  0 never executed
branch  1 never executed
        -: 1033:          {
    #####: 1034:            discardCard(j, i, state, 0);
    $$$$$: 1034-block  0
call    0 never executed
    #####: 1035:            break;
unconditional  0 never executed
        -: 1036:          }
    #####: 1037:          if (j == state->handCount[i])
    $$$$$: 1037-block  0
branch  0 never executed
branch  1 never executed
        -: 1038:          {
    #####: 1039:            for (k = 0; k < state->handCount[i]; k++)
    $$$$$: 1039-block  0
unconditional  0 never executed
    $$$$$: 1039-block  1
unconditional  1 never executed
    $$$$$: 1039-block  2
branch  2 never executed
branch  3 never executed
        -: 1040:            {
        -: 1041:              if (DEBUG)
        -: 1042:                printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1043:            }
    #####: 1044:            break;
    $$$$$: 1044-block  0
unconditional  0 never executed
        -: 1045:          }
        -: 1046:        }
        -: 1047:
        -: 1048:      }
        -: 1049:
        -: 1050:    }
        -: 1051:
        -: 1052:    //discard played card from hand
    #####: 1053:    discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1053-block  0
call    0 never executed
        -: 1054:
    #####: 1055:    return 0;
unconditional  0 never executed
        -: 1056:
        -: 1057:
        -: 1058:  case embargo:
        -: 1059:    //+2 Coins
    #####: 1060:    state->coins = state->coins + 2;
        -: 1061:
        -: 1062:    //see if selected pile is in play
    #####: 1063:    if ( state->supplyCount[choice1] == -1 )
    $$$$$: 1063-block  0
branch  0 never executed
branch  1 never executed
        -: 1064:    {
    #####: 1065:      return -1;
    $$$$$: 1065-block  0
unconditional  0 never executed
        -: 1066:    }
        -: 1067:
        -: 1068:    //add embargo token to selected supply pile
    #####: 1069:    state->embargoTokens[choice1]++;
        -: 1070:
        -: 1071:    //trash card
    #####: 1072:    discardCard(handPos, currentPlayer, state, 1);
    $$$$$: 1072-block  0
call    0 never executed
    #####: 1073:    return 0;
unconditional  0 never executed
        -: 1074:
        -: 1075:  case outpost:
        -: 1076:    //set outpost flag
    #####: 1077:    state->outpostPlayed++;
        -: 1078:
        -: 1079:    //discard card
    #####: 1080:    discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1080-block  0
call    0 never executed
    #####: 1081:    return 0;
unconditional  0 never executed
        -: 1082:
        -: 1083:  case salvager:
        -: 1084:    //+1 buy
    #####: 1085:    state->numBuys++;
        -: 1086:
    #####: 1087:    if (choice1)
    $$$$$: 1087-block  0
branch  0 never executed
branch  1 never executed
        -: 1088:    {
        -: 1089:      //gain coins equal to trashed card
    #####: 1090:      state->coins = state->coins + getCost( handCard(choice1, state) );
    $$$$$: 1090-block  0
call    0 never executed
call    1 never executed
        -: 1091:      //trash card
    #####: 1092:      discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
unconditional  1 never executed
        -: 1093:    }
        -: 1094:
        -: 1095:    //discard card
    #####: 1096:    discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1096-block  0
call    0 never executed
    #####: 1097:    return 0;
unconditional  0 never executed
        -: 1098:
        -: 1099:  case sea_hag:
    #####: 1100:    for (i = 0; i < state->numPlayers; i++) {
    $$$$$: 1100-block  0
unconditional  0 never executed
    $$$$$: 1100-block  1
unconditional  1 never executed
    $$$$$: 1100-block  2
branch  2 never executed
branch  3 never executed
    #####: 1101:      if (i != currentPlayer) {
    $$$$$: 1101-block  0
branch  0 never executed
branch  1 never executed
    #####: 1102:        state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];          state->deckCount[i]--;
    #####: 1103:        state->discardCount[i]++;
    #####: 1104:        state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    $$$$$: 1104-block  0
unconditional  0 never executed
        -: 1105:      }
        -: 1106:    }
    #####: 1107:    return 0;
    $$$$$: 1107-block  0
unconditional  0 never executed
        -: 1108:
        -: 1109:  case treasure_map:
        -: 1110:    //search hand for another treasure_map
    #####: 1111:    index = -1;
    #####: 1112:    for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1112-block  0
unconditional  0 never executed
    $$$$$: 1112-block  1
unconditional  1 never executed
    $$$$$: 1112-block  2
branch  2 never executed
branch  3 never executed
        -: 1113:    {
    #####: 1114:      if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
    $$$$$: 1114-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1114-block  1
branch  2 never executed
branch  3 never executed
        -: 1115:      {
    #####: 1116:        index = i;
    #####: 1117:        break;
    $$$$$: 1117-block  0
unconditional  0 never executed
        -: 1118:      }
        -: 1119:    }
    #####: 1120:    if (index > -1)
    $$$$$: 1120-block  0
branch  0 never executed
branch  1 never executed
        -: 1121:    {
        -: 1122:      //trash both treasure cards
    #####: 1123:      discardCard(handPos, currentPlayer, state, 1);
    $$$$$: 1123-block  0
call    0 never executed
    #####: 1124:      discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1125:
        -: 1126:      //gain 4 Gold cards
    #####: 1127:      for (i = 0; i < 4; i++)
unconditional  0 never executed
unconditional  1 never executed
    $$$$$: 1127-block  0
branch  2 never executed
branch  3 never executed
        -: 1128:      {
    #####: 1129:        gainCard(gold, state, 1, currentPlayer);
    $$$$$: 1129-block  0
call    0 never executed
        -: 1130:      }
        -: 1131:
        -: 1132:      //return success
    #####: 1133:      return 1;
    $$$$$: 1133-block  0
unconditional  0 never executed
        -: 1134:    }
        -: 1135:
        -: 1136:    //no second treasure_map found in hand
    #####: 1137:    return -1;
    $$$$$: 1137-block  0
unconditional  0 never executed
        -: 1138:  }
        -: 1139:
   500009: 1140:  return -1;
   500009: 1140-block  0
unconditional  0 taken 500009
   500009: 1140-block  1
unconditional  1 taken 500009
        -: 1141:}
        -: 1142:
function discardCard called 7 returned 100% blocks executed 78%
        7: 1143:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        7: 1143-block  0
        -: 1144:{
        -: 1145:
        -: 1146:  //if card is not trashed, added to Played pile
        7: 1147:  if (trashFlag < 1)
        7: 1147-block  0
branch  0 taken 7 (fallthrough)
branch  1 taken 0
        -: 1148:  {
        -: 1149:    //add card to played pile
        7: 1150:    state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        7: 1151:    state->playedCardCount++;
        7: 1151-block  0
unconditional  0 taken 7
        -: 1152:  }
        -: 1153:
        -: 1154:  //set played card to -1
        7: 1155:  state->hand[currentPlayer][handPos] = -1;
        -: 1156:
        -: 1157:  //remove card from player's hand
        7: 1158:  if ( handPos == (state->handCount[currentPlayer] - 1) )   //last card in hand array is played
        7: 1158-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 7
        -: 1159:  {
        -: 1160:    //reduce number of cards in hand
    #####: 1161:    state->handCount[currentPlayer]--;
    $$$$$: 1161-block  0
unconditional  0 never executed
        -: 1162:  }
        7: 1163:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        7: 1163-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 7
        -: 1164:  {
        -: 1165:    //reduce number of cards in hand
    #####: 1166:    state->handCount[currentPlayer]--;
    $$$$$: 1166-block  0
unconditional  0 never executed
        -: 1167:  }
        -: 1168:  else
        -: 1169:  {
        -: 1170:    //replace discarded card with last card in hand
        7: 1171:    state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1172:    //set last card to -1
        7: 1173:    state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1174:    //reduce number of cards in hand
        7: 1175:    state->handCount[currentPlayer]--;
        7: 1175-block  0
unconditional  0 taken 7
        -: 1176:  }
        -: 1177:
        7: 1178:  return 0;
        7: 1178-block  0
unconditional  0 taken 7
        -: 1179:}
        -: 1180:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1181:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
    $$$$$: 1181-block  0
        -: 1182:{
        -: 1183:  //Note: supplyPos is enum of choosen card
        -: 1184:
        -: 1185:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1186:  if ( supplyCount(supplyPos, state) < 1 )
    $$$$$: 1186-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1187:  {
    #####: 1188:    return -1;
    $$$$$: 1188-block  0
unconditional  0 never executed
        -: 1189:  }
        -: 1190:
        -: 1191:  //added card for [whoseTurn] current player:
        -: 1192:  // toFlag = 0 : add to discard
        -: 1193:  // toFlag = 1 : add to deck
        -: 1194:  // toFlag = 2 : add to hand
        -: 1195:
    #####: 1196:  if (toFlag == 1)
    $$$$$: 1196-block  0
branch  0 never executed
branch  1 never executed
        -: 1197:  {
    #####: 1198:    state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1199:    state->deckCount[player]++;
    $$$$$: 1199-block  0
unconditional  0 never executed
        -: 1200:  }
    #####: 1201:  else if (toFlag == 2)
    $$$$$: 1201-block  0
branch  0 never executed
branch  1 never executed
        -: 1202:  {
    #####: 1203:    state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1204:    state->handCount[player]++;
    $$$$$: 1204-block  0
unconditional  0 never executed
        -: 1205:  }
        -: 1206:  else
        -: 1207:  {
    #####: 1208:    state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1209:    state->discardCount[player]++;
    $$$$$: 1209-block  0
unconditional  0 never executed
        -: 1210:  }
        -: 1211:
        -: 1212:  //decrease number in supply pile
    #####: 1213:  state->supplyCount[supplyPos]--;
        -: 1214:
    #####: 1215:  return 0;
    $$$$$: 1215-block  0
unconditional  0 never executed
        -: 1216:}
        -: 1217:
function updateCoins called 2500019 returned 100% blocks executed 100%
  2500019: 1218:int updateCoins(int player, struct gameState *state, int bonus)
  2500019: 1218-block  0
        -: 1219:{
        -: 1220:  int i;
        -: 1221:
        -: 1222:  //reset coin count
  2500019: 1223:  state->coins = 0;
        -: 1224:
        -: 1225:  //add coins for each Treasure card in player's hand
383089249: 1226:  for (i = 0; i < state->handCount[player]; i++)
  2500019: 1226-block  0
unconditional  0 taken 2500019
380589230: 1226-block  1
unconditional  1 taken 380589230
383089249: 1226-block  2
branch  2 taken 380589230
branch  3 taken 2500019 (fallthrough)
        -: 1227:  {
380589230: 1228:    if (state->hand[player][i] == copper)
380589230: 1228-block  0
branch  0 taken 65720337 (fallthrough)
branch  1 taken 314868893
        -: 1229:    {
 65720337: 1230:      state->coins += 1;
 65720337: 1230-block  0
unconditional  0 taken 65720337
        -: 1231:    }
314868893: 1232:    else if (state->hand[player][i] == silver)
314868893: 1232-block  0
branch  0 taken 62973882 (fallthrough)
branch  1 taken 251895011
        -: 1233:    {
 62973882: 1234:      state->coins += 2;
 62973882: 1234-block  0
unconditional  0 taken 62973882
        -: 1235:    }
251895011: 1236:    else if (state->hand[player][i] == gold)
251895011: 1236-block  0
branch  0 taken 62858490 (fallthrough)
branch  1 taken 189036521
        -: 1237:    {
 62858490: 1238:      state->coins += 3;
 62858490: 1238-block  0
unconditional  0 taken 62858490
        -: 1239:    }
        -: 1240:  }
        -: 1241:
        -: 1242:  //add bonus
  2500019: 1243:  state->coins += bonus;
        -: 1244:
  2500019: 1245:  return 0;
  2500019: 1245-block  0
unconditional  0 taken 2500019
        -: 1246:}
        -: 1247:
        -: 1248:// bugged functions
        -: 1249:
function adventurer_function called 500001 returned 100% blocks executed 69%
   500001: 1250:int adventurer_function(struct gameState *state)
   500001: 1250-block  0
        -: 1251:{
   500001: 1252:  int currentPlayer = whoseTurn(state);
   500001: 1252-block  0
call    0 returned 500001
        -: 1253:
        -: 1254:  int temphand[MAX_HAND];// moved above the if statement
   500001: 1255:  int drawntreasure = 0;
        -: 1256:  int cardDrawn;
   500001: 1257:  int z = 0;// this is the counter for the temp hand
        -: 1258:
  1000002: 1259:  while (drawntreasure < 1) { // BUG s/b 2
unconditional  0 taken 500001
  1000002: 1259-block  0
branch  1 taken 500001
branch  2 taken 500001 (fallthrough)
   500001: 1260:    if (state->deckCount[currentPlayer] < 1) { //if the deck is empty we need to shuffle discard and add to deck
   500001: 1260-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 500001
    #####: 1261:      shuffle(currentPlayer, state);
    $$$$$: 1261-block  0
call    0 never executed
unconditional  1 never executed
        -: 1262:    }
   500001: 1263:    drawCard(currentPlayer, state);
   500001: 1263-block  0
call    0 returned 500001
   500001: 1264:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1]; //top card of hand is most recently drawn card.
   500001: 1265:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 0 (fallthrough)
branch  1 taken 500001
    $$$$$: 1265-block  0
branch  2 never executed
branch  3 never executed
    $$$$$: 1265-block  1
branch  4 never executed
branch  5 never executed
   500001: 1266:      drawntreasure++;
   500001: 1266-block  0
unconditional  0 taken 500001
        -: 1267:    else {
    #####: 1268:      temphand[z] = cardDrawn;
    #####: 1269:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1270:      z++;
    $$$$$: 1270-block  0
unconditional  0 never executed
        -: 1271:    }
        -: 1272:  }
   500001: 1273:  while (z - 1 >= 0) {
   500001: 1273-block  0
unconditional  0 taken 500001
   500001: 1273-block  1
branch  1 taken 0
branch  2 taken 500001 (fallthrough)
    #####: 1274:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####: 1275:    z = z - 1;
    $$$$$: 1275-block  0
unconditional  0 never executed
        -: 1276:  }
   500001: 1277:  return 0;
   500001: 1277-block  0
unconditional  0 taken 500001
        -: 1278:}
        -: 1279:
function smithy_function called 6 returned 100% blocks executed 100%
        6: 1280:int smithy_function(struct gameState *state, int handPos)
        6: 1280-block  0
        -: 1281:{
        6: 1282:  int i = 0;
        6: 1283:  int currentPlayer = whoseTurn(state);
        6: 1283-block  0
call    0 returned 6
        -: 1284:
        -: 1285://+3 Cards
       18: 1286:  for (i = 0; i < 2; i++) //BUG s/b 3
unconditional  0 taken 6
unconditional  1 taken 12
       18: 1286-block  0
branch  2 taken 12
branch  3 taken 6 (fallthrough)
        -: 1287:  {
       12: 1288:    drawCard(currentPlayer, state);
       12: 1288-block  0
call    0 returned 12
        -: 1289:  }
        -: 1290:
        -: 1291:  //discard card from hand
        6: 1292:  discardCard(handPos, currentPlayer, state, 0);
        6: 1292-block  0
call    0 returned 6
        6: 1293:  return 0;
unconditional  0 taken 6
        -: 1294:}
        -: 1295:
function remodel_function called 0 returned 0% blocks executed 0%
    #####: 1296:int remodel_function(struct gameState *state, int choice1, int choice2, int currentPlayer, int handPos)
    $$$$$: 1296-block  0
        -: 1297:{
    #####: 1298:  int i = 0;
    #####: 1299:  int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1300:
    #####: 1301:  if ( (getCost(state->hand[currentPlayer][choice1]) + 2) < getCost(choice2) ) // BUG s/b >
    $$$$$: 1301-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1302:  {
    #####: 1303:    return -1;
    $$$$$: 1303-block  0
unconditional  0 never executed
        -: 1304:  }
        -: 1305:
    #####: 1306:  gainCard(choice2, state, 0, currentPlayer);
    $$$$$: 1306-block  0
call    0 never executed
        -: 1307:
        -: 1308:  //discard card from hand
    #####: 1309:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1310:
        -: 1311:  //discard trashed card
    #####: 1312:  for (i = 0; i < state->handCount[currentPlayer]; i++)
unconditional  0 never executed
    $$$$$: 1312-block  0
unconditional  1 never executed
    $$$$$: 1312-block  1
branch  2 never executed
branch  3 never executed
        -: 1313:  {
    #####: 1314:    if (state->hand[currentPlayer][i] == j)
    $$$$$: 1314-block  0
branch  0 never executed
branch  1 never executed
        -: 1315:    {
    #####: 1316:      discardCard(i, currentPlayer, state, 0);
    $$$$$: 1316-block  0
call    0 never executed
    #####: 1317:      break;
unconditional  0 never executed
        -: 1318:    }
        -: 1319:  }
    #####: 1320:  return 0;
    $$$$$: 1320-block  0
unconditional  0 never executed
        -: 1321:}
        -: 1322:
function council_room_function called 1 returned 100% blocks executed 100%
        1: 1323:int council_room_function(struct gameState *state, int handPos)
        1: 1323-block  0
        -: 1324:{
        1: 1325:  int i = 0;
        1: 1326:  int currentPlayer = whoseTurn(state);
        1: 1326-block  0
call    0 returned 1
        -: 1327:
        -: 1328:  //+4 Cards
        5: 1329:  for (i = 0; i < 4; i++)
unconditional  0 taken 1
unconditional  1 taken 4
        5: 1329-block  0
branch  2 taken 4
branch  3 taken 1 (fallthrough)
        -: 1330:  {
        4: 1331:    drawCard(currentPlayer, state);
        4: 1331-block  0
call    0 returned 4
        -: 1332:  }
        -: 1333:
        -: 1334:  //+1 Buy
        -: 1335:  // state->numBuys++; //BUG should not be commented
        -: 1336:
        -: 1337:  //Each other player draws a card
        3: 1338:  for (i = 0; i < state->numPlayers; i++)
        1: 1338-block  0
unconditional  0 taken 1
        2: 1338-block  1
unconditional  1 taken 2
        3: 1338-block  2
branch  2 taken 2
branch  3 taken 1 (fallthrough)
        -: 1339:  {
        2: 1340:    if ( i != currentPlayer )
        2: 1340-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        -: 1341:    {
        1: 1342:      drawCard(i, state);
        1: 1342-block  0
call    0 returned 1
unconditional  1 taken 1
        -: 1343:    }
        -: 1344:  }
        -: 1345:
        -: 1346:  //put played card in played card pile
        1: 1347:  discardCard(handPos, currentPlayer, state, 0);
        1: 1347-block  0
call    0 returned 1
        -: 1348:
        1: 1349:  return 0;
unconditional  0 taken 1
        -: 1350:}
        -: 1351:
        -: 1352:// not bugged functions
function great_hall_function called 0 returned 0% blocks executed 0%
    #####: 1353:int great_hall_function(struct gameState *state, int handPos){
    $$$$$: 1353-block  0
        -: 1354:
    #####: 1355:  int currentPlayer = whoseTurn(state);
    $$$$$: 1355-block  0
call    0 never executed
        -: 1356:  
        -: 1357:  //+1 Card
    #####: 1358:  drawCard(currentPlayer, state);
call    0 never executed
        -: 1359:
        -: 1360:  //+1 Actions
    #####: 1361:  state->numActions++;
        -: 1362:
        -: 1363:  //discard card from hand
    #####: 1364:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1365:  return 0;
unconditional  0 never executed
        -: 1366:}
        -: 1367://end of dominion.c
        -: 1368:
