        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:4
        -:    0:Programs:4
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 45000150 returned 100% blocks executed 83%
 45000150:    8:int compare(const void* a, const void* b) {
 45000150:    8-block  0
 45000150:    9:  if (*(int*)a > *(int*)b)
 45000150:    9-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 45000150
    #####:   10:    return 1;
    $$$$$:   10-block  0
unconditional  0 never executed
 45000150:   11:  if (*(int*)a < *(int*)b)
 45000150:   11-block  0
branch  0 taken 12000040 (fallthrough)
branch  1 taken 33000110
 12000040:   12:    return -1;
 12000040:   12-block  0
unconditional  0 taken 12000040
 33000110:   13:  return 0;
 33000110:   13-block  0
unconditional  0 taken 33000110
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    $$$$$:   16-block  0
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
    $$$$$:   18-block  0
unconditional  0 never executed
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
    $$$$$:   21-block  0
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
    $$$$$:   34-block  0
unconditional  0 never executed
        -:   35:}
        -:   36:
function initializeGame called 1500005 returned 100% blocks executed 88%
  1500005:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
  1500005:   37-block  0
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
  1500005:   44:  SelectStream(1);
  1500005:   44-block  0
call    0 returned 1500005
  1500005:   45:  PutSeed((long)randomSeed);
call    0 returned 1500005
        -:   46:  
        -:   47:  //check number of players
  1500005:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 1500005 (fallthrough)
branch  1 taken 0
  1500005:   48-block  0
branch  2 taken 0 (fallthrough)
branch  3 taken 1500005
        -:   49:    {
    #####:   50:      return -1;
    $$$$$:   50-block  0
unconditional  0 never executed
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
  1500005:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
 16500055:   57:  for (i = 0; i < 10; i++)
  1500005:   57-block  0
unconditional  0 taken 1500005
 15000050:   57-block  1
unconditional  1 taken 15000050
 16500055:   57-block  2
branch  2 taken 15000050
branch  3 taken 1500005 (fallthrough)
        -:   58:    {
165000550:   59:      for (j = 0; j < 10; j++)
 15000050:   59-block  0
unconditional  0 taken 15000050
150000500:   59-block  1
unconditional  1 taken 150000500
165000550:   59-block  2
branch  2 taken 150000500
branch  3 taken 15000050 (fallthrough)
        -:   60:        {
150000500:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
150000500:   61-block  0
branch  0 taken 135000450 (fallthrough)
branch  1 taken 15000050
135000450:   61-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 135000450
        -:   62:	    {
    #####:   63:	      return -1;
    $$$$$:   63-block  0
unconditional  0 never executed
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
  1500005:   73:  if (numPlayers == 2)
  1500005:   73-block  0
branch  0 taken 1500005 (fallthrough)
branch  1 taken 0
        -:   74:    {
  1500005:   75:      state->supplyCount[curse] = 10;
  1500005:   75-block  0
unconditional  0 taken 1500005
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
    $$$$$:   77-block  0
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    $$$$$:   79-block  0
unconditional  0 never executed
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
    $$$$$:   83-block  0
unconditional  0 never executed
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
  1500005:   87:  if (numPlayers == 2)
  1500005:   87-block  0
branch  0 taken 1500005 (fallthrough)
branch  1 taken 0
        -:   88:    {
  1500005:   89:      state->supplyCount[estate] = 8;
  1500005:   90:      state->supplyCount[duchy] = 8;
  1500005:   91:      state->supplyCount[province] = 8;
  1500005:   91-block  0
unconditional  0 taken 1500005
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
    $$$$$:   97-block  0
unconditional  0 never executed
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
  1500005:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
  1500005:  102:  state->supplyCount[silver] = 40;
  1500005:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
 31500105:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
  1500005:  106-block  0
unconditional  0 taken 1500005
 30000100:  106-block  1
unconditional  1 taken 30000100
 31500105:  106-block  2
branch  2 taken 30000100
branch  3 taken 1500005 (fallthrough)
        -:  107:    {
247500825:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
 30000100:  108-block  0
unconditional  0 taken 30000100
217500725:  108-block  1
unconditional  1 taken 217500725
247500825:  108-block  2
branch  2 taken 232500775
branch  3 taken 15000050 (fallthrough)
        -:  109:	{
232500775:  110:	  if (kingdomCards[j] == i)
232500775:  110-block  0
branch  0 taken 15000050 (fallthrough)
branch  1 taken 217500725
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
 15000050:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
 15000050:  113-block  0
branch  0 taken 15000050 (fallthrough)
branch  1 taken 0
 15000050:  113-block  1
branch  2 taken 1500005 (fallthrough)
branch  3 taken 13500045
        -:  114:		{
  3000010:  115:		  if (numPlayers == 2){ 
  1500005:  115-block  0
branch  0 taken 1500005 (fallthrough)
branch  1 taken 0
  1500005:  115-block  1
unconditional  2 taken 1500005
  1500005:  116:		    state->supplyCount[i] = 8; 
  1500005:  116-block  0
unconditional  0 taken 1500005
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
    $$$$$:  118-block  0
unconditional  0 never executed
        -:  119:		}
        -:  120:	      else
        -:  121:		{
 13500045:  122:		  state->supplyCount[i] = 10;
 13500045:  122-block  0
unconditional  0 taken 13500045
        -:  123:		}
 15000050:  124:	      break;
 15000050:  124-block  0
unconditional  0 taken 15000050
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
217500725:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
  4500015:  138:  for (i = 0; i < numPlayers; i++)
  1500005:  138-block  0
unconditional  0 taken 1500005
  3000010:  138-block  1
unconditional  1 taken 3000010
  4500015:  138-block  2
branch  2 taken 3000010
branch  3 taken 1500005 (fallthrough)
        -:  139:    {
  3000010:  140:      state->deckCount[i] = 0;
 12000040:  141:      for (j = 0; j < 3; j++)
  3000010:  141-block  0
unconditional  0 taken 3000010
  9000030:  141-block  1
unconditional  1 taken 9000030
 12000040:  141-block  2
branch  2 taken 9000030
branch  3 taken 3000010 (fallthrough)
        -:  142:	{
  9000030:  143:	  state->deck[i][j] = estate;
  9000030:  144:	  state->deckCount[i]++;
        -:  145:	}
 24000080:  146:      for (j = 3; j < 10; j++)
  3000010:  146-block  0
unconditional  0 taken 3000010
 21000070:  146-block  1
unconditional  1 taken 21000070
 24000080:  146-block  2
branch  2 taken 21000070
branch  3 taken 3000010 (fallthrough)
        -:  147:	{
 21000070:  148:	  state->deck[i][j] = copper;
 21000070:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
  4500015:  154:  for (i = 0; i < numPlayers; i++)
  1500005:  154-block  0
unconditional  0 taken 1500005
  3000010:  154-block  1
unconditional  1 taken 3000010
  4500015:  154-block  2
branch  2 taken 3000010
branch  3 taken 1500005 (fallthrough)
        -:  155:    {
  3000010:  156:      if ( shuffle(i, state) < 0 )
  3000010:  156-block  0
call    0 returned 3000010
branch  1 taken 0 (fallthrough)
branch  2 taken 3000010
        -:  157:	{
    #####:  158:	  return -1;
    $$$$$:  158-block  0
unconditional  0 never executed
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
  4500015:  163:  for (i = 0; i < numPlayers; i++)
  1500005:  163-block  0
unconditional  0 taken 1500005
  3000010:  163-block  1
unconditional  1 taken 3000010
  4500015:  163-block  2
branch  2 taken 3000010
branch  3 taken 1500005 (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
  3000010:  166:      state->handCount[i] = 0;
  3000010:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
 42000140:  176:  for (i = 0; i <= treasure_map; i++)
  1500005:  176-block  0
unconditional  0 taken 1500005
 40500135:  176-block  1
unconditional  1 taken 40500135
 42000140:  176-block  2
branch  2 taken 40500135
branch  3 taken 1500005 (fallthrough)
        -:  177:    {
 40500135:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
  1500005:  182:  state->outpostPlayed = 0;
  1500005:  183:  state->phase = 0;
  1500005:  184:  state->numActions = 1;
  1500005:  185:  state->numBuys = 1;
  1500005:  186:  state->playedCardCount = 0;
  1500005:  187:  state->whoseTurn = 0;
  1500005:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
  9000030:  192:  for (it = 0; it < 5; it++){
  1500005:  192-block  0
unconditional  0 taken 1500005
unconditional  1 taken 7500025
  9000030:  192-block  1
branch  2 taken 7500025
branch  3 taken 1500005 (fallthrough)
  7500025:  193:    drawCard(state->whoseTurn, state);
  7500025:  193-block  0
call    0 returned 7500025
        -:  194:  }
        -:  195:
  1500005:  196:  updateCoins(state->whoseTurn, state, 0);
  1500005:  196-block  0
call    0 returned 1500005
        -:  197:
  1500005:  198:  return 0;
unconditional  0 taken 1500005
        -:  199:}
        -:  200:
function shuffle called 12927290 returned 100% blocks executed 100%
 12927290:  201:int shuffle(int player, struct gameState *state) {
 12927290:  201-block  0
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
 12927290:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
 12927290:  209:  if (state->deckCount[player] < 1)
 12927290:  209-block  0
branch  0 taken 9927280 (fallthrough)
branch  1 taken 3000010
  9927280:  210:    return -1;
  9927280:  210-block  0
unconditional  0 taken 9927280
  3000010:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
  3000010:  211-block  0
call    0 returned 3000010
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
 33000110:  214:  while (state->deckCount[player] > 0) {
unconditional  0 taken 3000010
 33000110:  214-block  0
branch  1 taken 30000100
branch  2 taken 3000010 (fallthrough)
 30000100:  215:    card = floor(Random() * state->deckCount[player]);
 30000100:  215-block  0
call    0 returned 30000100
 30000100:  216:    newDeck[newDeckPos] = state->deck[player][card];
 30000100:  217:    newDeckPos++;
 93000310:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
unconditional  0 taken 30000100
 63000210:  218-block  0
unconditional  1 taken 63000210
 93000310:  218-block  1
branch  2 taken 63000210
branch  3 taken 30000100 (fallthrough)
 63000210:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
 30000100:  221:    state->deckCount[player]--;
 30000100:  221-block  0
unconditional  0 taken 30000100
        -:  222:  }
 33000110:  223:  for (i = 0; i < newDeckPos; i++) {
  3000010:  223-block  0
unconditional  0 taken 3000010
 30000100:  223-block  1
unconditional  1 taken 30000100
 33000110:  223-block  2
branch  2 taken 30000100
branch  3 taken 3000010 (fallthrough)
 30000100:  224:    state->deck[player][i] = newDeck[i];
 30000100:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
 12927290:  228:  return 0;
  3000010:  228-block  0
unconditional  0 taken 3000010
 12927290:  228-block  1
unconditional  1 taken 12927290
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
    $$$$$:  231-block  0
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
    $$$$$:  237-block  0
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
    $$$$$:  239-block  0
unconditional  0 never executed
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
    $$$$$:  243-block  0
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
    $$$$$:  245-block  0
unconditional  0 never executed
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
    $$$$$:  249-block  0
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
    $$$$$:  252-block  0
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
    $$$$$:  254-block  0
unconditional  0 never executed
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
    $$$$$:  258-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
    $$$$$:  260-block  0
unconditional  0 never executed
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
    $$$$$:  267-block  0
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
unconditional  0 never executed
    $$$$$:  269-block  0
unconditional  1 never executed
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
    $$$$$:  272-block  0
    $$$$$:  272-block  1
unconditional  0 never executed
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
    $$$$$:  282-block  0
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    $$$$$:  285-block  0
unconditional  0 never executed
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
    $$$$$:  286-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    $$$$$:  289-block  0
unconditional  0 never executed
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
    $$$$$:  290-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
    $$$$$:  293-block  0
unconditional  0 never executed
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
    $$$$$:  297-block  0
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
unconditional  0 never executed
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
    $$$$$:  308-block  0
unconditional  0 never executed
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    $$$$$:  311-block  0
    #####:  312:  return state->handCount[ whoseTurn(state) ];
    $$$$$:  312-block  0
call    0 never executed
unconditional  1 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    $$$$$:  315-block  0
    #####:  316:  int currentPlayer = whoseTurn(state);
    $$$$$:  316-block  0
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
unconditional  0 never executed
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    $$$$$:  320-block  0
    #####:  321:  return state->supplyCount[card];
    $$$$$:  321-block  0
unconditional  0 never executed
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
    $$$$$:  324-block  0
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
    $$$$$:  328-block  0
unconditional  0 never executed
    $$$$$:  328-block  1
unconditional  1 never executed
    $$$$$:  328-block  2
branch  2 never executed
branch  3 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
    $$$$$:  330-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  330-block  1
unconditional  2 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
    $$$$$:  333-block  0
unconditional  0 never executed
    $$$$$:  333-block  1
unconditional  1 never executed
    $$$$$:  333-block  2
branch  2 never executed
branch  3 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
    $$$$$:  335-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  335-block  1
unconditional  2 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  338-block  0
unconditional  0 never executed
    $$$$$:  338-block  1
unconditional  1 never executed
    $$$$$:  338-block  2
branch  2 never executed
branch  3 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
    $$$$$:  340-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  340-block  1
unconditional  2 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
    $$$$$:  343-block  0
unconditional  0 never executed
        -:  344:}
        -:  345:
function whoseTurn called 500005 returned 100% blocks executed 100%
   500005:  346:int whoseTurn(struct gameState *state) {
   500005:  346-block  0
   500005:  347:  return state->whoseTurn;
   500005:  347-block  0
unconditional  0 taken 500005
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
    $$$$$:  350-block  0
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
    $$$$$:  353-block  0
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
unconditional  0 never executed
    $$$$$:  356-block  0
unconditional  1 never executed
    $$$$$:  356-block  1
branch  2 never executed
branch  3 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    $$$$$:  363-block  0
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    $$$$$:  364-block  0
unconditional  0 never executed
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
    $$$$$:  367-block  0
unconditional  0 never executed
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    $$$$$:  380-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$:  380-block  1
branch  2 never executed
branch  3 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    $$$$$:  381-block  0
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
    $$$$$:  385-block  0
call    0 never executed
        -:  386:
    #####:  387:  return 0;
unconditional  0 never executed
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
    $$$$$:  390-block  0
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
    $$$$$:  395-block  0
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
    $$$$$:  397-block  0
unconditional  0 never executed
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
    $$$$$:  402-block  0
unconditional  0 never executed
    $$$$$:  402-block  1
unconditional  1 never executed
    $$$$$:  402-block  2
branch  2 never executed
branch  3 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
    $$$$$:  404-block  0
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
    $$$$$:  406-block  0
unconditional  0 never executed
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
    $$$$$:  409-block  0
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
    $$$$$:  411-block  0
unconditional  0 never executed
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
    $$$$$:  414-block  0
unconditional  0 never executed
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
    $$$$$:  417-block  0
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
    $$$$$:  422-block  0
unconditional  0 never executed
    $$$$$:  422-block  1
unconditional  1 never executed
    $$$$$:  422-block  2
branch  2 never executed
branch  3 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    $$$$$:  424-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  424-block  1
unconditional  2 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    $$$$$:  425-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  425-block  1
unconditional  2 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    $$$$$:  426-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  426-block  1
unconditional  2 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    $$$$$:  427-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  427-block  1
unconditional  2 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    $$$$$:  428-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  428-block  1
unconditional  2 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  429-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  429-block  1
call    2 never executed
unconditional  3 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  433-block  0
unconditional  0 never executed
    $$$$$:  433-block  1
unconditional  1 never executed
    $$$$$:  433-block  2
branch  2 never executed
branch  3 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    $$$$$:  435-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  435-block  1
unconditional  2 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    $$$$$:  436-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  436-block  1
unconditional  2 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    $$$$$:  437-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  437-block  1
unconditional  2 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    $$$$$:  438-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  438-block  1
unconditional  2 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    $$$$$:  439-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  439-block  1
unconditional  2 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  440-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  440-block  1
call    2 never executed
unconditional  3 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  444-block  0
unconditional  0 never executed
    $$$$$:  444-block  1
unconditional  1 never executed
    $$$$$:  444-block  2
branch  2 never executed
branch  3 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    $$$$$:  446-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  446-block  1
unconditional  2 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    $$$$$:  447-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  447-block  1
unconditional  2 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    $$$$$:  448-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  448-block  1
unconditional  2 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    $$$$$:  449-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  449-block  1
unconditional  2 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    $$$$$:  450-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  450-block  1
unconditional  2 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  451-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  451-block  1
call    2 never executed
unconditional  3 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
    $$$$$:  454-block  0
unconditional  0 never executed
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
    $$$$$:  457-block  0
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  464-block  0
unconditional  0 never executed
    $$$$$:  464-block  1
unconditional  1 never executed
    $$$$$:  464-block  2
branch  2 never executed
branch  3 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
    $$$$$:  467-block  0
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    $$$$$:  469-block  0
unconditional  0 never executed
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
    $$$$$:  473-block  0
call    0 never executed
unconditional  1 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  479-block  0
unconditional  0 never executed
    $$$$$:  479-block  1
unconditional  1 never executed
    $$$$$:  479-block  2
branch  2 never executed
branch  3 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
    $$$$$:  481-block  0
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
    $$$$$:  483-block  0
unconditional  0 never executed
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    $$$$$:  489-block  0
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
unconditional  0 never executed
    $$$$$:  490-block  0
unconditional  1 never executed
    $$$$$:  490-block  1
branch  2 never executed
branch  3 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
    $$$$$:  492-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  492-block  1
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
    $$$$$:  494-block  0
unconditional  0 never executed
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  500-block  0
unconditional  0 never executed
    $$$$$:  500-block  1
unconditional  1 never executed
    $$$$$:  500-block  2
branch  2 never executed
branch  3 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
    $$$$$:  502-block  0
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
    $$$$$:  504-block  0
unconditional  0 never executed
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  510-block  0
unconditional  0 never executed
    $$$$$:  510-block  1
unconditional  1 never executed
    $$$$$:  510-block  2
branch  2 never executed
branch  3 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
    $$$$$:  512-block  0
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
    $$$$$:  514-block  0
unconditional  0 never executed
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
    $$$$$:  518-block  0
unconditional  0 never executed
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
    $$$$$:  522-block  0
unconditional  0 never executed
        -:  523:}
        -:  524:
function drawCard called 14963695 returned 100% blocks executed 85%
 14963695:  525:int drawCard(int player, struct gameState *state)
 14963695:  525-block  0
        -:  526:{	int count;
        -:  527:  int deckCounter;
 14963695:  528:  if (state->deckCount[player] <= 0){//Deck is empty
 14963695:  528-block  0
branch  0 taken 4963640 (fallthrough)
branch  1 taken 10000055
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
  4963640:  533:    for (i = 0; i < state->discardCount[player];i++){
  4963640:  533-block  0
unconditional  0 taken 4963640
    $$$$$:  533-block  1
unconditional  1 never executed
  4963640:  533-block  2
branch  2 taken 0
branch  3 taken 4963640 (fallthrough)
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
  4963640:  538:    state->deckCount[player] = state->discardCount[player];
  4963640:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
  4963640:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
  4963640:  542-block  0
call    0 returned 4963640
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
  4963640:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
  4963640:  551:    count = state->handCount[player];//Get current player's hand count
unconditional  0 taken 4963640
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
  4963640:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
  4963640:  559:    if (deckCounter == 0)
  4963640:  559-block  0
branch  0 taken 4963640 (fallthrough)
branch  1 taken 0
  4963640:  560:      return -1;
  4963640:  560-block  0
unconditional  0 taken 4963640
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
    $$$$$:  564-block  0
unconditional  0 never executed
        -:  565:  }
        -:  566:
        -:  567:  else{
 10000055:  568:    int count = state->handCount[player];//Get current hand count for player
 10000055:  568-block  0
unconditional  0 taken 10000055
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
 10000055:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
 10000055:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
 10000055:  576:    state->deckCount[player]--;
 10000055:  577:    state->handCount[player]++;//Increment hand count
 10000055:  577-block  0
unconditional  0 taken 10000055
        -:  578:  }
        -:  579:
 10000055:  580:  return 0;
 10000055:  580-block  0
unconditional  0 taken 10000055
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
    $$$$$:  583-block  0
        -:  584:{
    #####:  585:  switch( cardNumber ) 
    $$$$$:  585-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
    $$$$$:  588-block  0
unconditional  0 never executed
        -:  589:    case estate:
    #####:  590:      return 2;
    $$$$$:  590-block  0
unconditional  0 never executed
        -:  591:    case duchy:
    #####:  592:      return 5;
    $$$$$:  592-block  0
unconditional  0 never executed
        -:  593:    case province:
    #####:  594:      return 8;
    $$$$$:  594-block  0
unconditional  0 never executed
        -:  595:    case copper:
    #####:  596:      return 0;
    $$$$$:  596-block  0
unconditional  0 never executed
        -:  597:    case silver:
    #####:  598:      return 3;
    $$$$$:  598-block  0
unconditional  0 never executed
        -:  599:    case gold:
    #####:  600:      return 6;
    $$$$$:  600-block  0
unconditional  0 never executed
        -:  601:    case adventurer:
    #####:  602:      return 6;
    $$$$$:  602-block  0
unconditional  0 never executed
        -:  603:    case council_room:
    #####:  604:      return 5;
    $$$$$:  604-block  0
unconditional  0 never executed
        -:  605:    case feast:
    #####:  606:      return 4;
    $$$$$:  606-block  0
unconditional  0 never executed
        -:  607:    case gardens:
    #####:  608:      return 4;
    $$$$$:  608-block  0
unconditional  0 never executed
        -:  609:    case mine:
    #####:  610:      return 5;
    $$$$$:  610-block  0
unconditional  0 never executed
        -:  611:    case remodel:
    #####:  612:      return 4;
    $$$$$:  612-block  0
unconditional  0 never executed
        -:  613:    case smithy:
    #####:  614:      return 4;
    $$$$$:  614-block  0
unconditional  0 never executed
        -:  615:    case village:
    #####:  616:      return 3;
    $$$$$:  616-block  0
unconditional  0 never executed
        -:  617:    case baron:
    #####:  618:      return 4;
    $$$$$:  618-block  0
unconditional  0 never executed
        -:  619:    case great_hall:
    #####:  620:      return 3;
    $$$$$:  620-block  0
unconditional  0 never executed
        -:  621:    case minion:
    #####:  622:      return 5;
    $$$$$:  622-block  0
unconditional  0 never executed
        -:  623:    case steward:
    #####:  624:      return 3;
    $$$$$:  624-block  0
unconditional  0 never executed
        -:  625:    case tribute:
    #####:  626:      return 5;
    $$$$$:  626-block  0
unconditional  0 never executed
        -:  627:    case ambassador:
    #####:  628:      return 3;
    $$$$$:  628-block  0
unconditional  0 never executed
        -:  629:    case cutpurse:
    #####:  630:      return 4;
    $$$$$:  630-block  0
unconditional  0 never executed
        -:  631:    case embargo: 
    #####:  632:      return 2;
    $$$$$:  632-block  0
unconditional  0 never executed
        -:  633:    case outpost:
    #####:  634:      return 5;
    $$$$$:  634-block  0
unconditional  0 never executed
        -:  635:    case salvager:
    #####:  636:      return 4;
    $$$$$:  636-block  0
unconditional  0 never executed
        -:  637:    case sea_hag:
    #####:  638:      return 4;
    $$$$$:  638-block  0
unconditional  0 never executed
        -:  639:    case treasure_map:
    #####:  640:      return 4;
    $$$$$:  640-block  0
unconditional  0 never executed
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
    $$$$$:  643-block  0
unconditional  0 never executed
        -:  644:}
        -:  645:
        -:  646:
        -:  647:
function adventurerEffect called 500000 returned 100% blocks executed 100%
   500000:  648:int adventurerEffect(struct gameState *state, int currentPlayer){
   500000:  648-block  0
        -:  649:
        -:  650:  	// Init Variables
        -:  651:	int temphand[MAX_HAND];// moved above the if statement
   500000:  652:  	int drawntreasure=0;
        -:  653:  	int cardDrawn;
   500000:  654:  	int z = 0;// this is the counter for the temp handi
        -:  655:
  7963640:  656:      while(drawntreasure<2){
   500000:  656-block  0
unconditional  0 taken 500000
  7963640:  656-block  1
branch  1 taken 7463640
branch  2 taken 500000 (fallthrough)
  7463640:  657:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
  7463640:  657-block  0
branch  0 taken 4963640 (fallthrough)
branch  1 taken 2500000
  4963640:  658:	  shuffle(currentPlayer, state);
  4963640:  658-block  0
call    0 returned 4963640
unconditional  1 taken 4963640
        -:  659:	}
  7463640:  660:	drawCard(currentPlayer, state);
  7463640:  660-block  0
call    0 returned 7463640
  7463640:  661:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
  7463640:  662:	if (cardDrawn == silver || cardDrawn == gold)
branch  0 taken 6909078 (fallthrough)
branch  1 taken 554562
  6909078:  662-block  0
branch  2 taken 445438 (fallthrough)
branch  3 taken 6463640
  1000000:  663:	  drawntreasure++;
  1000000:  663-block  0
unconditional  0 taken 1000000
        -:  664:	else{
  6463640:  665:	  temphand[z]=cardDrawn;
  6463640:  666:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
  6463640:  667:	  z++;
  6463640:  667-block  0
unconditional  0 taken 6463640
        -:  668:	}
        -:  669:      }
  6963640:  670:      while(z-1>=0){
   500000:  670-block  0
unconditional  0 taken 500000
  6963640:  670-block  1
branch  1 taken 6463640
branch  2 taken 500000 (fallthrough)
  6463640:  671:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
  6463640:  672:	z=z-1;
  6463640:  672-block  0
unconditional  0 taken 6463640
        -:  673:      }
   500000:  674:      return 0;
   500000:  674-block  0
unconditional  0 taken 500000
        -:  675:
        -:  676:}
        -:  677:
function smithyEffect called 5 returned 100% blocks executed 100%
        5:  678:int smithyEffect(struct gameState *state, int currentPlayer, int handPos){
        5:  678-block  0
        -:  679:      //+3 Cards
        -:  680:      int i; 
        -:  681:
       35:  682:      for (i = 0; i <6 ; i++)
        5:  682-block  0
unconditional  0 taken 5
unconditional  1 taken 30
       35:  682-block  1
branch  2 taken 30
branch  3 taken 5 (fallthrough)
        -:  683:	{
       30:  684:	  drawCard(currentPlayer, state);
       30:  684-block  0
call    0 returned 30
        -:  685:	}
        -:  686:			
        -:  687:      //discard card from hand
        5:  688:      discardCard(handPos, currentPlayer, state, 0);
        5:  688-block  0
call    0 returned 5
        5:  689:      return 0;
unconditional  0 taken 5
        -:  690:
        -:  691:}
        -:  692:
function councilRoomEffect called 0 returned 0% blocks executed 0%
    #####:  693:int councilRoomEffect(struct gameState *state, int currentPlayer, int handPos){
    $$$$$:  693-block  0
        -:  694:
        -:  695:      int i; 
        -:  696:
        -:  697:      //+4 Cards
    #####:  698:      for (i = 0; i <3 ; i++)
    $$$$$:  698-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$:  698-block  1
branch  2 never executed
branch  3 never executed
        -:  699:	{
    #####:  700:	  drawCard(currentPlayer, state);
    $$$$$:  700-block  0
call    0 never executed
        -:  701:	}
        -:  702:			
        -:  703:      //+1 Buy
    #####:  704:      state->numBuys++;
        -:  705:			
        -:  706:      //Each other player draws a card
    #####:  707:      for (i = 0; i < state->numPlayers; i++)
    $$$$$:  707-block  0
unconditional  0 never executed
    $$$$$:  707-block  1
unconditional  1 never executed
    $$$$$:  707-block  2
branch  2 never executed
branch  3 never executed
        -:  708:	{
    #####:  709:	  if ( i != currentPlayer )
    $$$$$:  709-block  0
branch  0 never executed
branch  1 never executed
        -:  710:	    {
    #####:  711:	      drawCard(i, state);
    $$$$$:  711-block  0
call    0 never executed
unconditional  1 never executed
        -:  712:	    }
        -:  713:	}
        -:  714:			
        -:  715:      //put played card in played card pile
    #####:  716:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  716-block  0
call    0 never executed
        -:  717:			
    #####:  718:      return 0;
unconditional  0 never executed
        -:  719:
        -:  720:}
        -:  721:
function gardensEffect called 0 returned 0% blocks executed 0%
    #####:  722:int gardensEffect(){
    $$$$$:  722-block  0
    #####:  723:	return -1; 
    $$$$$:  723-block  0
unconditional  0 never executed
        -:  724:}
        -:  725:
        -:  726:
function villageEffect called 0 returned 0% blocks executed 0%
    #####:  727:int villageEffect(struct gameState *state, int currentPlayer, int handPos){
    $$$$$:  727-block  0
        -:  728:
        -:  729:      //+1 Card
    #####:  730:      drawCard(currentPlayer, state);
    $$$$$:  730-block  0
call    0 never executed
        -:  731:			
        -:  732:      //+2 Actions
    #####:  733:      state->numActions = state->numActions + 1;
        -:  734:			
        -:  735:      //discard played card from hand
    #####:  736:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  737:      return 0;
unconditional  0 never executed
        -:  738:	
        -:  739:}
function cardEffect called 500005 returned 100% blocks executed 3%
   500005:  740:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
   500005:  740-block  0
        -:  741:{
        -:  742:  int i;
        -:  743:  int j;
        -:  744:  int k;
        -:  745:  int x;
        -:  746:  int index;
   500005:  747:  int currentPlayer = whoseTurn(state);
   500005:  747-block  0
call    0 returned 500005
   500005:  748:  int nextPlayer = currentPlayer + 1;
        -:  749:
   500005:  750:  int tributeRevealedCards[2] = {-1, -1};
        -:  751:  int temphand[MAX_HAND];// moved above the if statement
   500005:  752:  int drawntreasure=0;
        -:  753:  int cardDrawn;
   500005:  754:  int z = 0;// this is the counter for the temp handi
   500005:  755:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0 (fallthrough)
branch  1 taken 500005
    #####:  756:    nextPlayer = 0;
    $$$$$:  756-block  0
unconditional  0 never executed
        -:  757:  }
        -:  758:  
        -:  759:	
        -:  760:  //uses switch to select card and perform actions
   500005:  761:  switch( card ) 
   500005:  761-block  0
branch  0 taken 500000
branch  1 taken 0
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
branch  6 taken 5
branch  7 taken 0
branch  8 taken 0
branch  9 taken 0
branch 10 taken 0
branch 11 taken 0
branch 12 taken 0
branch 13 taken 0
branch 14 taken 0
branch 15 taken 0
branch 16 taken 0
branch 17 taken 0
branch 18 taken 0
branch 19 taken 0
branch 20 taken 0
        -:  762:    {
        -:  763:    case adventurer:
   500000:  764:	return adventurerEffect(state, currentPlayer); 
   500000:  764-block  0
call    0 returned 500000
unconditional  1 taken 500000
        -:  765:
        -:  766:	
        -:  767:    case council_room:
    #####:  768:	return councilRoomEffect(state, currentPlayer, handPos); 
    $$$$$:  768-block  0
call    0 never executed
unconditional  1 never executed
        -:  769:			
        -:  770:    case feast:
        -:  771:      //gain card with cost up to 5
        -:  772:      //Backup hand
    #####:  773:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  773-block  0
unconditional  0 never executed
    $$$$$:  773-block  1
unconditional  1 never executed
    $$$$$:  773-block  2
branch  2 never executed
branch  3 never executed
    #####:  774:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  775:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  776:      }
        -:  777:      //Backup hand
        -:  778:
        -:  779:      //Update Coins for Buy
    #####:  780:      updateCoins(currentPlayer, state, 5);
    $$$$$:  780-block  0
call    0 never executed
    #####:  781:      x = 1;//Condition to loop on
    #####:  782:      while( x == 1) {//Buy one card
unconditional  0 never executed
    $$$$$:  782-block  0
branch  1 never executed
branch  2 never executed
    #####:  783:	if (supplyCount(choice1, state) <= 0){
    $$$$$:  783-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  784:	  if (DEBUG)
        -:  785:	    printf("None of that card left, sorry!\n");
        -:  786:
        -:  787:	  if (DEBUG){
        -:  788:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  789:	  }
        -:  790:	}
    #####:  791:	else if (state->coins < getCost(choice1)){
    $$$$$:  791-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  792:	  printf("That card is too expensive!\n");
    $$$$$:  792-block  0
call    0 never executed
unconditional  1 never executed
        -:  793:
        -:  794:	  if (DEBUG){
        -:  795:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  796:	  }
        -:  797:	}
        -:  798:	else{
        -:  799:
        -:  800:	  if (DEBUG){
        -:  801:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  802:	  }
        -:  803:
    #####:  804:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    $$$$$:  804-block  0
call    0 never executed
    #####:  805:	  x = 0;//No more buying cards
unconditional  0 never executed
        -:  806:
        -:  807:	  if (DEBUG){
        -:  808:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  809:	  }
        -:  810:
        -:  811:	}
        -:  812:      }     
        -:  813:
        -:  814:      //Reset Hand
    #####:  815:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  815-block  0
unconditional  0 never executed
    $$$$$:  815-block  1
unconditional  1 never executed
    $$$$$:  815-block  2
branch  2 never executed
branch  3 never executed
    #####:  816:	state->hand[currentPlayer][i] = temphand[i];
    #####:  817:	temphand[i] = -1;
        -:  818:      }
        -:  819:      //Reset Hand
        -:  820:      			
    #####:  821:      return 0;
    $$$$$:  821-block  0
unconditional  0 never executed
        -:  822:			
        -:  823:    case gardens:
    #####:  824:      return gardensEffect(); 
    $$$$$:  824-block  0
call    0 never executed
unconditional  1 never executed
        -:  825:			
        -:  826:    case mine:
    #####:  827:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  828:
    #####:  829:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
    $$$$$:  829-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  829-block  1
branch  2 never executed
branch  3 never executed
        -:  830:	{
    #####:  831:	  return -1;
    $$$$$:  831-block  0
unconditional  0 never executed
        -:  832:	}
        -:  833:		
    #####:  834:      if (choice2 > treasure_map || choice2 < curse)
    $$$$$:  834-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  834-block  1
branch  2 never executed
branch  3 never executed
        -:  835:	{
    #####:  836:	  return -1;
    $$$$$:  836-block  0
unconditional  0 never executed
        -:  837:	}
        -:  838:
    #####:  839:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
    $$$$$:  839-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  840:	{
    #####:  841:	  return -1;
    $$$$$:  841-block  0
unconditional  0 never executed
        -:  842:	}
        -:  843:
    #####:  844:      gainCard(choice2, state, 2, currentPlayer);
    $$$$$:  844-block  0
call    0 never executed
        -:  845:
        -:  846:      //discard card from hand
    #####:  847:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  848:
        -:  849:      //discard trashed card
    #####:  850:      for (i = 0; i < state->handCount[currentPlayer]; i++)
unconditional  0 never executed
    $$$$$:  850-block  0
unconditional  1 never executed
    $$$$$:  850-block  1
branch  2 never executed
branch  3 never executed
        -:  851:	{
    #####:  852:	  if (state->hand[currentPlayer][i] == j)
    $$$$$:  852-block  0
branch  0 never executed
branch  1 never executed
        -:  853:	    {
    #####:  854:	      discardCard(i, currentPlayer, state, 0);			
    $$$$$:  854-block  0
call    0 never executed
    #####:  855:	      break;
unconditional  0 never executed
        -:  856:	    }
        -:  857:	}
        -:  858:			
    #####:  859:      return 0;
    $$$$$:  859-block  0
unconditional  0 never executed
        -:  860:			
        -:  861:    case remodel:
    #####:  862:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  863:
    #####:  864:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
    $$$$$:  864-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  865:	{
    #####:  866:	  return -1;
    $$$$$:  866-block  0
unconditional  0 never executed
        -:  867:	}
        -:  868:
    #####:  869:      gainCard(choice2, state, 0, currentPlayer);
    $$$$$:  869-block  0
call    0 never executed
        -:  870:
        -:  871:      //discard card from hand
    #####:  872:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  873:
        -:  874:      //discard trashed card
    #####:  875:      for (i = 0; i < state->handCount[currentPlayer]; i++)
unconditional  0 never executed
    $$$$$:  875-block  0
unconditional  1 never executed
    $$$$$:  875-block  1
branch  2 never executed
branch  3 never executed
        -:  876:	{
    #####:  877:	  if (state->hand[currentPlayer][i] == j)
    $$$$$:  877-block  0
branch  0 never executed
branch  1 never executed
        -:  878:	    {
    #####:  879:	      discardCard(i, currentPlayer, state, 0);			
    $$$$$:  879-block  0
call    0 never executed
    #####:  880:	      break;
unconditional  0 never executed
        -:  881:	    }
        -:  882:	}
        -:  883:
        -:  884:
    #####:  885:      return 0;
    $$$$$:  885-block  0
unconditional  0 never executed
        -:  886:		
        -:  887:    case smithy:
        5:  888:      return smithyEffect(state, currentPlayer, handPos); 
        5:  888-block  0
call    0 returned 5
unconditional  1 taken 5
        -:  889:		
        -:  890:    case village:
    #####:  891:      return villageEffect(state, currentPlayer, handPos); 
    $$$$$:  891-block  0
call    0 never executed
unconditional  1 never executed
        -:  892:		
        -:  893:    case baron:
    #####:  894:      state->numBuys++;//Increase buys by 1!
    #####:  895:      if (choice1 > 0){//Boolean true or going to discard an estate
    $$$$$:  895-block  0
branch  0 never executed
branch  1 never executed
    #####:  896:	int p = 0;//Iterator for hand!
    #####:  897:	int card_not_discarded = 1;//Flag for discard set!
    #####:  898:	while(card_not_discarded){
    $$$$$:  898-block  0
unconditional  0 never executed
    $$$$$:  898-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  898-block  2
unconditional  3 never executed
    #####:  899:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    $$$$$:  899-block  0
branch  0 never executed
branch  1 never executed
    #####:  900:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  901:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  902:	    state->discardCount[currentPlayer]++;
    #####:  903:	    for (;p < state->handCount[currentPlayer]; p++){
    $$$$$:  903-block  0
unconditional  0 never executed
    $$$$$:  903-block  1
unconditional  1 never executed
    $$$$$:  903-block  2
branch  2 never executed
branch  3 never executed
    #####:  904:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  905:	    }
    #####:  906:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  907:	    state->handCount[currentPlayer]--;
    #####:  908:	    card_not_discarded = 0;//Exit the loop
    $$$$$:  908-block  0
unconditional  0 never executed
        -:  909:	  }
    #####:  910:	  else if (p > state->handCount[currentPlayer]){
    $$$$$:  910-block  0
branch  0 never executed
branch  1 never executed
        -:  911:	    if(DEBUG) {
        -:  912:	      printf("No estate cards in your hand, invalid choice\n");
        -:  913:	      printf("Must gain an estate if there are any\n");
        -:  914:	    }
    #####:  915:	    if (supplyCount(estate, state) > 0){
    $$$$$:  915-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  916:	      gainCard(estate, state, 0, currentPlayer);
    $$$$$:  916-block  0
call    0 never executed
    #####:  917:	      state->supplyCount[estate]--;//Decrement estates
    #####:  918:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  919:		isGameOver(state);
    $$$$$:  919-block  0
call    0 never executed
unconditional  1 never executed
        -:  920:	      }
        -:  921:	    }
    #####:  922:	    card_not_discarded = 0;//Exit the loop
    $$$$$:  922-block  0
unconditional  0 never executed
        -:  923:	  }
        -:  924:			    
        -:  925:	  else{
    #####:  926:	    p++;//Next card
    $$$$$:  926-block  0
unconditional  0 never executed
        -:  927:	  }
        -:  928:	}
        -:  929:      }
        -:  930:			    
        -:  931:      else{
    #####:  932:	if (supplyCount(estate, state) > 0){
    $$$$$:  932-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  933:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    $$$$$:  933-block  0
call    0 never executed
    #####:  934:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  935:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  936:	    isGameOver(state);
    $$$$$:  936-block  0
call    0 never executed
unconditional  1 never executed
        -:  937:	  }
        -:  938:	}
        -:  939:      }
        -:  940:	    
        -:  941:      
    #####:  942:      return 0;
    $$$$$:  942-block  0
unconditional  0 never executed
        -:  943:		
        -:  944:    case great_hall:
        -:  945:      //+1 Card
    #####:  946:      drawCard(currentPlayer, state);
    $$$$$:  946-block  0
call    0 never executed
        -:  947:			
        -:  948:      //+1 Actions
    #####:  949:      state->numActions++;
        -:  950:			
        -:  951:      //discard card from hand
    #####:  952:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  953:      return 0;
unconditional  0 never executed
        -:  954:		
        -:  955:    case minion:
        -:  956:      //+1 action
    #####:  957:      state->numActions++;
        -:  958:			
        -:  959:      //discard card from hand
    #####:  960:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  960-block  0
call    0 never executed
        -:  961:			
    #####:  962:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  963:	{
    #####:  964:	  state->coins = state->coins + 2;
    $$$$$:  964-block  0
unconditional  0 never executed
        -:  965:	}
        -:  966:			
    #####:  967:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
    $$$$$:  967-block  0
branch  0 never executed
branch  1 never executed
        -:  968:	{
        -:  969:	  //discard hand
    #####:  970:	  while(numHandCards(state) > 0)
    $$$$$:  970-block  0
unconditional  0 never executed
    $$$$$:  970-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  971:	    {
    #####:  972:	      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  972-block  0
call    0 never executed
unconditional  1 never executed
        -:  973:	    }
        -:  974:				
        -:  975:	  //draw 4
    #####:  976:	  for (i = 0; i < 4; i++)
    $$$$$:  976-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$:  976-block  1
branch  2 never executed
branch  3 never executed
        -:  977:	    {
    #####:  978:	      drawCard(currentPlayer, state);
    $$$$$:  978-block  0
call    0 never executed
        -:  979:	    }
        -:  980:				
        -:  981:	  //other players discard hand and redraw if hand size > 4
    #####:  982:	  for (i = 0; i < state->numPlayers; i++)
    $$$$$:  982-block  0
unconditional  0 never executed
    $$$$$:  982-block  1
unconditional  1 never executed
    $$$$$:  982-block  2
branch  2 never executed
branch  3 never executed
        -:  983:	    {
    #####:  984:	      if (i != currentPlayer)
    $$$$$:  984-block  0
branch  0 never executed
branch  1 never executed
        -:  985:		{
    #####:  986:		  if ( state->handCount[i] > 4 )
    $$$$$:  986-block  0
branch  0 never executed
branch  1 never executed
        -:  987:		    {
        -:  988:		      //discard hand
    #####:  989:		      while( state->handCount[i] > 0 )
    $$$$$:  989-block  0
unconditional  0 never executed
    $$$$$:  989-block  1
branch  1 never executed
branch  2 never executed
        -:  990:			{
    #####:  991:			  discardCard(handPos, i, state, 0);
    $$$$$:  991-block  0
call    0 never executed
unconditional  1 never executed
        -:  992:			}
        -:  993:							
        -:  994:		      //draw 4
    #####:  995:		      for (j = 0; j < 4; j++)
    $$$$$:  995-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$:  995-block  1
branch  2 never executed
branch  3 never executed
        -:  996:			{
    #####:  997:			  drawCard(i, state);
    $$$$$:  997-block  0
call    0 never executed
        -:  998:			}
        -:  999:		    }
        -: 1000:		}
        -: 1001:	    }
        -: 1002:				
        -: 1003:	}
    #####: 1004:      return 0;
    $$$$$: 1004-block  0
unconditional  0 never executed
        -: 1005:		
        -: 1006:    case steward:
    #####: 1007:      if (choice1 == 1)
    $$$$$: 1007-block  0
branch  0 never executed
branch  1 never executed
        -: 1008:	{
        -: 1009:	  //+2 cards
    #####: 1010:	  drawCard(currentPlayer, state);
    $$$$$: 1010-block  0
call    0 never executed
    #####: 1011:	  drawCard(currentPlayer, state);
call    0 never executed
unconditional  1 never executed
        -: 1012:	}
    #####: 1013:      else if (choice1 == 2)
    $$$$$: 1013-block  0
branch  0 never executed
branch  1 never executed
        -: 1014:	{
        -: 1015:	  //+2 coins
    #####: 1016:	  state->coins = state->coins + 2;
    $$$$$: 1016-block  0
unconditional  0 never executed
        -: 1017:	}
        -: 1018:      else
        -: 1019:	{
        -: 1020:	  //trash 2 cards in hand
    #####: 1021:	  discardCard(choice2, currentPlayer, state, 1);
    $$$$$: 1021-block  0
call    0 never executed
    #####: 1022:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
unconditional  1 never executed
        -: 1023:	}
        -: 1024:			
        -: 1025:      //discard card from hand
    #####: 1026:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1026-block  0
call    0 never executed
    #####: 1027:      return 0;
unconditional  0 never executed
        -: 1028:		
        -: 1029:    case tribute:
    #####: 1030:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    $$$$$: 1030-block  0
branch  0 never executed
branch  1 never executed
    #####: 1031:	if (state->deckCount[nextPlayer] > 0){
    $$$$$: 1031-block  0
branch  0 never executed
branch  1 never executed
    #####: 1032:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1033:	  state->deckCount[nextPlayer]--;
    $$$$$: 1033-block  0
unconditional  0 never executed
        -: 1034:	}
    #####: 1035:	else if (state->discardCount[nextPlayer] > 0){
    $$$$$: 1035-block  0
branch  0 never executed
branch  1 never executed
    #####: 1036:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1037:	  state->discardCount[nextPlayer]--;
    $$$$$: 1037-block  0
unconditional  0 never executed
        -: 1038:	}
        -: 1039:	else{
        -: 1040:	  //No Card to Reveal
        -: 1041:	  if (DEBUG){
        -: 1042:	    printf("No cards to reveal\n");
        -: 1043:	  }
        -: 1044:	}
        -: 1045:      }
        -: 1046:	    
        -: 1047:      else{
    #####: 1048:	if (state->deckCount[nextPlayer] == 0){
    $$$$$: 1048-block  0
branch  0 never executed
branch  1 never executed
    #####: 1049:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    $$$$$: 1049-block  0
unconditional  0 never executed
    $$$$$: 1049-block  1
unconditional  1 never executed
    $$$$$: 1049-block  2
branch  2 never executed
branch  3 never executed
    #####: 1050:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1051:	    state->deckCount[nextPlayer]++;
    #####: 1052:	    state->discard[nextPlayer][i] = -1;
    #####: 1053:	    state->discardCount[nextPlayer]--;
        -: 1054:	  }
        -: 1055:			    
    #####: 1056:	  shuffle(nextPlayer,state);//Shuffle the deck
    $$$$$: 1056-block  0
call    0 never executed
unconditional  1 never executed
        -: 1057:	} 
    #####: 1058:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1059:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1060:	state->deckCount[nextPlayer]--;
    #####: 1061:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1062:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1063:	state->deckCount[nextPlayer]--;
    $$$$$: 1063-block  0
unconditional  0 never executed
        -: 1064:      }    
        -: 1065:		       
    #####: 1066:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    $$$$$: 1066-block  0
branch  0 never executed
branch  1 never executed
    #####: 1067:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1068:	state->playedCardCount++;
    #####: 1069:	tributeRevealedCards[1] = -1;
    $$$$$: 1069-block  0
unconditional  0 never executed
        -: 1070:      }
        -: 1071:
    #####: 1072:      for (i = 0; i <= 2; i ++){
    $$$$$: 1072-block  0
unconditional  0 never executed
    $$$$$: 1072-block  1
unconditional  1 never executed
    $$$$$: 1072-block  2
branch  2 never executed
branch  3 never executed
    #####: 1073:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    $$$$$: 1073-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1073-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1073-block  2
branch  4 never executed
branch  5 never executed
    #####: 1074:	  state->coins += 2;
    $$$$$: 1074-block  0
unconditional  0 never executed
        -: 1075:	}
        -: 1076:		    
    #####: 1077:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    $$$$$: 1077-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1077-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1077-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 1077-block  3
branch  6 never executed
branch  7 never executed
    $$$$$: 1077-block  4
branch  8 never executed
branch  9 never executed
    #####: 1078:	  drawCard(currentPlayer, state);
    $$$$$: 1078-block  0
call    0 never executed
    #####: 1079:	  drawCard(currentPlayer, state);
call    0 never executed
unconditional  1 never executed
        -: 1080:	}
        -: 1081:	else{//Action Card
    #####: 1082:	  state->numActions = state->numActions + 2;
    $$$$$: 1082-block  0
unconditional  0 never executed
        -: 1083:	}
        -: 1084:      }
        -: 1085:	    
    #####: 1086:      return 0;
    $$$$$: 1086-block  0
unconditional  0 never executed
        -: 1087:		
        -: 1088:    case ambassador:
    #####: 1089:      j = 0;		//used to check if player has enough cards to discard
        -: 1090:
    #####: 1091:      if (choice2 > 2 || choice2 < 0)
    $$$$$: 1091-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1091-block  1
branch  2 never executed
branch  3 never executed
        -: 1092:	{
    #####: 1093:	  return -1;				
    $$$$$: 1093-block  0
unconditional  0 never executed
        -: 1094:	}
        -: 1095:
    #####: 1096:      if (choice1 == handPos)
    $$$$$: 1096-block  0
branch  0 never executed
branch  1 never executed
        -: 1097:	{
    #####: 1098:	  return -1;
    $$$$$: 1098-block  0
unconditional  0 never executed
        -: 1099:	}
        -: 1100:
    #####: 1101:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1101-block  0
unconditional  0 never executed
    $$$$$: 1101-block  1
unconditional  1 never executed
    $$$$$: 1101-block  2
branch  2 never executed
branch  3 never executed
        -: 1102:	{
    #####: 1103:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
    $$$$$: 1103-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1103-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1103-block  2
branch  4 never executed
branch  5 never executed
        -: 1104:	    {
    #####: 1105:	      j++;
    $$$$$: 1105-block  0
unconditional  0 never executed
        -: 1106:	    }
        -: 1107:	}
    #####: 1108:      if (j < choice2)
    $$$$$: 1108-block  0
branch  0 never executed
branch  1 never executed
        -: 1109:	{
    #####: 1110:	  return -1;				
    $$$$$: 1110-block  0
unconditional  0 never executed
        -: 1111:	}
        -: 1112:
        -: 1113:      if (DEBUG) 
        -: 1114:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1115:
        -: 1116:      //increase supply count for choosen card by amount being discarded
    #####: 1117:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1118:			
        -: 1119:      //each other player gains a copy of revealed card
    #####: 1120:      for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1120-block  0
unconditional  0 never executed
    $$$$$: 1120-block  1
unconditional  1 never executed
    $$$$$: 1120-block  2
branch  2 never executed
branch  3 never executed
        -: 1121:	{
    #####: 1122:	  if (i != currentPlayer)
    $$$$$: 1122-block  0
branch  0 never executed
branch  1 never executed
        -: 1123:	    {
    #####: 1124:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    $$$$$: 1124-block  0
call    0 never executed
unconditional  1 never executed
        -: 1125:	    }
        -: 1126:	}
        -: 1127:
        -: 1128:      //discard played card from hand
    #####: 1129:      discardCard(handPos, currentPlayer, state, 0);			
    $$$$$: 1129-block  0
call    0 never executed
        -: 1130:
        -: 1131:      //trash copies of cards returned to supply
    #####: 1132:      for (j = 0; j < choice2; j++)
unconditional  0 never executed
    $$$$$: 1132-block  0
unconditional  1 never executed
    $$$$$: 1132-block  1
branch  2 never executed
branch  3 never executed
        -: 1133:	{
    #####: 1134:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1134-block  0
unconditional  0 never executed
    $$$$$: 1134-block  1
unconditional  1 never executed
    $$$$$: 1134-block  2
branch  2 never executed
branch  3 never executed
        -: 1135:	    {
    #####: 1136:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
    $$$$$: 1136-block  0
branch  0 never executed
branch  1 never executed
        -: 1137:		{
    #####: 1138:		  discardCard(i, currentPlayer, state, 1);
    $$$$$: 1138-block  0
call    0 never executed
    #####: 1139:		  break;
unconditional  0 never executed
        -: 1140:		}
        -: 1141:	    }
        -: 1142:	}			
        -: 1143:
    #####: 1144:      return 0;
    $$$$$: 1144-block  0
unconditional  0 never executed
        -: 1145:		
        -: 1146:    case cutpurse:
        -: 1147:
    #####: 1148:      updateCoins(currentPlayer, state, 2);
    $$$$$: 1148-block  0
call    0 never executed
    #####: 1149:      for (i = 0; i < state->numPlayers; i++)
unconditional  0 never executed
    $$$$$: 1149-block  0
unconditional  1 never executed
    $$$$$: 1149-block  1
branch  2 never executed
branch  3 never executed
        -: 1150:	{
    #####: 1151:	  if (i != currentPlayer)
    $$$$$: 1151-block  0
branch  0 never executed
branch  1 never executed
        -: 1152:	    {
    #####: 1153:	      for (j = 0; j < state->handCount[i]; j++)
    $$$$$: 1153-block  0
unconditional  0 never executed
    $$$$$: 1153-block  1
unconditional  1 never executed
    $$$$$: 1153-block  2
branch  2 never executed
branch  3 never executed
        -: 1154:		{
    #####: 1155:		  if (state->hand[i][j] == copper)
    $$$$$: 1155-block  0
branch  0 never executed
branch  1 never executed
        -: 1156:		    {
    #####: 1157:		      discardCard(j, i, state, 0);
    $$$$$: 1157-block  0
call    0 never executed
    #####: 1158:		      break;
unconditional  0 never executed
        -: 1159:		    }
    #####: 1160:		  if (j == state->handCount[i])
    $$$$$: 1160-block  0
branch  0 never executed
branch  1 never executed
        -: 1161:		    {
    #####: 1162:		      for (k = 0; k < state->handCount[i]; k++)
    $$$$$: 1162-block  0
unconditional  0 never executed
    $$$$$: 1162-block  1
unconditional  1 never executed
    $$$$$: 1162-block  2
branch  2 never executed
branch  3 never executed
        -: 1163:			{
        -: 1164:			  if (DEBUG)
        -: 1165:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1166:			}	
    #####: 1167:		      break;
    $$$$$: 1167-block  0
unconditional  0 never executed
        -: 1168:		    }		
        -: 1169:		}
        -: 1170:					
        -: 1171:	    }
        -: 1172:				
        -: 1173:	}				
        -: 1174:
        -: 1175:      //discard played card from hand
    #####: 1176:      discardCard(handPos, currentPlayer, state, 0);			
    $$$$$: 1176-block  0
call    0 never executed
        -: 1177:
    #####: 1178:      return 0;
unconditional  0 never executed
        -: 1179:
        -: 1180:		
        -: 1181:    case embargo: 
        -: 1182:      //+2 Coins
    #####: 1183:      state->coins = state->coins + 2;
        -: 1184:			
        -: 1185:      //see if selected pile is in play
    #####: 1186:      if ( state->supplyCount[choice1] == -1 )
    $$$$$: 1186-block  0
branch  0 never executed
branch  1 never executed
        -: 1187:	{
    #####: 1188:	  return -1;
    $$$$$: 1188-block  0
unconditional  0 never executed
        -: 1189:	}
        -: 1190:			
        -: 1191:      //add embargo token to selected supply pile
    #####: 1192:      state->embargoTokens[choice1]++;
        -: 1193:			
        -: 1194:      //trash card
    #####: 1195:      discardCard(handPos, currentPlayer, state, 1);		
    $$$$$: 1195-block  0
call    0 never executed
    #####: 1196:      return 0;
unconditional  0 never executed
        -: 1197:		
        -: 1198:    case outpost:
        -: 1199:      //set outpost flag
    #####: 1200:      state->outpostPlayed++;
        -: 1201:			
        -: 1202:      //discard card
    #####: 1203:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1203-block  0
call    0 never executed
    #####: 1204:      return 0;
unconditional  0 never executed
        -: 1205:		
        -: 1206:    case salvager:
        -: 1207:      //+1 buy
    #####: 1208:      state->numBuys++;
        -: 1209:			
    #####: 1210:      if (choice1)
    $$$$$: 1210-block  0
branch  0 never executed
branch  1 never executed
        -: 1211:	{
        -: 1212:	  //gain coins equal to trashed card
    #####: 1213:	  state->coins = state->coins + getCost( handCard(choice1, state) );
    $$$$$: 1213-block  0
call    0 never executed
call    1 never executed
        -: 1214:	  //trash card
    #####: 1215:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
unconditional  1 never executed
        -: 1216:	}
        -: 1217:			
        -: 1218:      //discard card
    #####: 1219:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1219-block  0
call    0 never executed
    #####: 1220:      return 0;
unconditional  0 never executed
        -: 1221:		
        -: 1222:    case sea_hag:
    #####: 1223:      for (i = 0; i < state->numPlayers; i++){
    $$$$$: 1223-block  0
unconditional  0 never executed
    $$$$$: 1223-block  1
unconditional  1 never executed
    $$$$$: 1223-block  2
branch  2 never executed
branch  3 never executed
    #####: 1224:	if (i != currentPlayer){
    $$$$$: 1224-block  0
branch  0 never executed
branch  1 never executed
    #####: 1225:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1226:	  state->discardCount[i]++;
    #####: 1227:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    $$$$$: 1227-block  0
unconditional  0 never executed
        -: 1228:	}
        -: 1229:      }
    #####: 1230:      return 0;
    $$$$$: 1230-block  0
unconditional  0 never executed
        -: 1231:		
        -: 1232:    case treasure_map:
        -: 1233:      //search hand for another treasure_map
    #####: 1234:      index = -1;
    #####: 1235:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1235-block  0
unconditional  0 never executed
    $$$$$: 1235-block  1
unconditional  1 never executed
    $$$$$: 1235-block  2
branch  2 never executed
branch  3 never executed
        -: 1236:	{
    #####: 1237:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
    $$$$$: 1237-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1237-block  1
branch  2 never executed
branch  3 never executed
        -: 1238:	    {
    #####: 1239:	      index = i;
    #####: 1240:	      break;
    $$$$$: 1240-block  0
unconditional  0 never executed
        -: 1241:	    }
        -: 1242:	}
    #####: 1243:      if (index > -1)
    $$$$$: 1243-block  0
branch  0 never executed
branch  1 never executed
        -: 1244:	{
        -: 1245:	  //trash both treasure cards
    #####: 1246:	  discardCard(handPos, currentPlayer, state, 1);
    $$$$$: 1246-block  0
call    0 never executed
    #####: 1247:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1248:
        -: 1249:	  //gain 4 Gold cards
    #####: 1250:	  for (i = 0; i < 4; i++)
unconditional  0 never executed
unconditional  1 never executed
    $$$$$: 1250-block  0
branch  2 never executed
branch  3 never executed
        -: 1251:	    {
    #####: 1252:	      gainCard(gold, state, 1, currentPlayer);
    $$$$$: 1252-block  0
call    0 never executed
        -: 1253:	    }
        -: 1254:				
        -: 1255:	  //return success
    #####: 1256:	  return 1;
    $$$$$: 1256-block  0
unconditional  0 never executed
        -: 1257:	}
        -: 1258:			
        -: 1259:      //no second treasure_map found in hand
    #####: 1260:      return -1;
    $$$$$: 1260-block  0
unconditional  0 never executed
        -: 1261:    }
        -: 1262:	
   500005: 1263:  return -1;
    $$$$$: 1263-block  0
unconditional  0 never executed
   500005: 1263-block  1
unconditional  1 taken 500005
        -: 1264:}
        -: 1265:
function discardCard called 5 returned 100% blocks executed 78%
        5: 1266:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        5: 1266-block  0
        -: 1267:{
        -: 1268:	
        -: 1269:  //if card is not trashed, added to Played pile 
        5: 1270:  if (trashFlag < 1)
        5: 1270-block  0
branch  0 taken 5 (fallthrough)
branch  1 taken 0
        -: 1271:    {
        -: 1272:      //add card to played pile
        5: 1273:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        5: 1274:      state->playedCardCount++;
        5: 1274-block  0
unconditional  0 taken 5
        -: 1275:    }
        -: 1276:	
        -: 1277:  //set played card to -1
        5: 1278:  state->hand[currentPlayer][handPos] = -1;
        -: 1279:	
        -: 1280:  //remove card from player's hand
        5: 1281:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        5: 1281-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 5
        -: 1282:    {
        -: 1283:      //reduce number of cards in hand
    #####: 1284:      state->handCount[currentPlayer]--;
    $$$$$: 1284-block  0
unconditional  0 never executed
        -: 1285:    }
        5: 1286:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        5: 1286-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 5
        -: 1287:    {
        -: 1288:      //reduce number of cards in hand
    #####: 1289:      state->handCount[currentPlayer]--;
    $$$$$: 1289-block  0
unconditional  0 never executed
        -: 1290:    }
        -: 1291:  else 	
        -: 1292:    {
        -: 1293:      //replace discarded card with last card in hand
        5: 1294:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1295:      //set last card to -1
        5: 1296:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1297:      //reduce number of cards in hand
        5: 1298:      state->handCount[currentPlayer]--;
        5: 1298-block  0
unconditional  0 taken 5
        -: 1299:    }
        -: 1300:	
        5: 1301:  return 0;
        5: 1301-block  0
unconditional  0 taken 5
        -: 1302:}
        -: 1303:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1304:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
    $$$$$: 1304-block  0
        -: 1305:{
        -: 1306:  //Note: supplyPos is enum of choosen card
        -: 1307:	
        -: 1308:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1309:  if ( supplyCount(supplyPos, state) < 1 )
    $$$$$: 1309-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1310:    {
    #####: 1311:      return -1;
    $$$$$: 1311-block  0
unconditional  0 never executed
        -: 1312:    }
        -: 1313:	
        -: 1314:  //added card for [whoseTurn] current player:
        -: 1315:  // toFlag = 0 : add to discard
        -: 1316:  // toFlag = 1 : add to deck
        -: 1317:  // toFlag = 2 : add to hand
        -: 1318:
    #####: 1319:  if (toFlag == 1)
    $$$$$: 1319-block  0
branch  0 never executed
branch  1 never executed
        -: 1320:    {
    #####: 1321:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1322:      state->deckCount[player]++;
    $$$$$: 1322-block  0
unconditional  0 never executed
        -: 1323:    }
    #####: 1324:  else if (toFlag == 2)
    $$$$$: 1324-block  0
branch  0 never executed
branch  1 never executed
        -: 1325:    {
    #####: 1326:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1327:      state->handCount[player]++;
    $$$$$: 1327-block  0
unconditional  0 never executed
        -: 1328:    }
        -: 1329:  else
        -: 1330:    {
    #####: 1331:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1332:      state->discardCount[player]++;
    $$$$$: 1332-block  0
unconditional  0 never executed
        -: 1333:    }
        -: 1334:	
        -: 1335:  //decrease number in supply pile
    #####: 1336:  state->supplyCount[supplyPos]--;
        -: 1337:	 
    #####: 1338:  return 0;
    $$$$$: 1338-block  0
unconditional  0 never executed
        -: 1339:}
        -: 1340:
function updateCoins called 4500005 returned 100% blocks executed 100%
  4500005: 1341:int updateCoins(int player, struct gameState *state, int bonus)
  4500005: 1341-block  0
        -: 1342:{
        -: 1343:  int i;
        -: 1344:	
        -: 1345:  //reset coin count
  4500005: 1346:  state->coins = 0;
        -: 1347:
        -: 1348:  //add coins for each Treasure card in player's hand
763301720: 1349:  for (i = 0; i < state->handCount[player]; i++)
  4500005: 1349-block  0
unconditional  0 taken 4500005
758801715: 1349-block  1
unconditional  1 taken 758801715
763301720: 1349-block  2
branch  2 taken 758801715
branch  3 taken 4500005 (fallthrough)
        -: 1350:    {
758801715: 1351:      if (state->hand[player][i] == copper)
758801715: 1351-block  0
branch  0 taken 130029398 (fallthrough)
branch  1 taken 628772317
        -: 1352:	{
130029398: 1353:	  state->coins += 1;
130029398: 1353-block  0
unconditional  0 taken 130029398
        -: 1354:	}
628772317: 1355:      else if (state->hand[player][i] == silver)
628772317: 1355-block  0
branch  0 taken 125950185 (fallthrough)
branch  1 taken 502822132
        -: 1356:	{
125950185: 1357:	  state->coins += 2;
125950185: 1357-block  0
unconditional  0 taken 125950185
        -: 1358:	}
502822132: 1359:      else if (state->hand[player][i] == gold)
502822132: 1359-block  0
branch  0 taken 125562841 (fallthrough)
branch  1 taken 377259291
        -: 1360:	{
125562841: 1361:	  state->coins += 3;
125562841: 1361-block  0
unconditional  0 taken 125562841
        -: 1362:	}	
        -: 1363:    }	
        -: 1364:
        -: 1365:  //add bonus
  4500005: 1366:  state->coins += bonus;
        -: 1367:
  4500005: 1368:  return 0;
  4500005: 1368-block  0
unconditional  0 taken 4500005
        -: 1369:}
        -: 1370:
        -: 1371:
        -: 1372://end of dominion.c
        -: 1373:
